<?xml version="1.0" encoding="utf-8"?>
<root  xmlns:android="http://schemas.android.com/apk/res/android">
    <init>
        <log text="ByteSdk_APL INIT"/>
    </init>

	
    <buildscriptGradleAdditions>
        <insert>
repositories {
    maven {
        url 'https://artifact.bytedance.com/repository/ttgamesdk'
    }
}
dependencies {
    classpath 'com.bytedance.ttgame:gsdk_plugin:8.12.2'
    classpath 'com.google.gms:google-services:4.2.0'
}
    </insert>
    </buildscriptGradleAdditions>

    <buildGradleAdditions>
        <insert>
dependencies {
	implementation('com.google.code.gson:gson:2.8.9')
}
apply plugin: 'g.gsdk' // 跟在com.android.application或者com.android.library引入语句的后面

gsdk {
        //请手动替换为游戏真实的app_id，并解开注释
        appId = '7634'
        it.version = '3.8.0.1'
        region = 'i18n'
        optionalModules='push,appsflyer,udp'
        depType = 'api'
        componentSpec {
            account { it.modules = 'DEFAULT'}
            Crash { it.modules = 'DEFAULT'}
        }
    }
android {
       defaultConfig {
            manifestPlaceholders = [
                appAuthRedirectScheme: applicationId
            ]
       }
}
apply plugin: 'com.google.gms.google-services'
    </insert>
    </buildGradleAdditions>
    
    <resourceCopies>
        <copyFile src="$S(PluginDir)/Private/Android/CopyFiles/config.json" dst="$S(BuildDir)/assets/config.json" force="true"/>
        <copyFile src="$S(PluginDir)/Private/Android/CopyFiles/NativeCallBack.java" dst="$S(BuildDir)/src/com/epicgames/unreal/NativeCallBack.java" />
        <copyFile src="$S(PluginDir)/Private/Android/CopyFiles/google-services.json" dst="$S(BuildDir)/gradle/app/google-services.json" force="true"/>
        <copyDir src="$S(PluginDir)/Private/Android/CopyFiles/notchtools" dst="$S(BuildDir)/src/notchtools"/>
		<copyDir src="$S(PluginDir)/Private/Android/CopyFiles/$S(Architecture)" dst="$S(BuildDir)/libs/$S(Architecture)"/>
		<copyDir src="$S(PluginDir)/Private/Android/CopyFiles/res" dst="$S(BuildDir)/res"/>
    </resourceCopies>

    <gameApplicationSuperClass>
        <insert>RocketApplication</insert>
    </gameApplicationSuperClass>
    <gameApplicationImportAdditions>
        <insert>
import com.bytedance.ttgame.rocketapi.Rocket;
import com.bytedance.ttgame.rocketapi.RocketApplication;
import com.bytedance.ttgame.module.appsflyer.api.AppsFlyerDeepLinkCallback;
import com.bytedance.ttgame.module.appsflyer.api.IAppsFlyerService;
import java.util.Map;
        </insert>
    </gameApplicationImportAdditions>
    <gameApplicationOnCreateAdditions>
		<insert>
    Rocket.getInstance().getComponent(IAppsFlyerService.class).setAFDeepLinkDataCallback(new AppsFlyerDeepLinkCallback() {
		@Override
		public void onAppsFlyerDeepLinking(Map&lt;String, String&gt; data) {
			Log.verbose("AFDeepLinkCallback data=" + data.toString());
		}		
	});    
	</insert>
    </gameApplicationOnCreateAdditions>

    <androidManifestUpdates>
        <setElement result="FBAppId" value="meta-data" />
        <addAttribute tag="$FBAppId" name="android:name" value="com.facebook.sdk.ApplicationId" />
        <addAttribute tag="$FBAppId" name="android:value" value="@string/gsdk_account_facebook_app_id" />
        <addElement tag="application" name="FBAppId" />

        <setElement result="FBProvider" value="provider" />
        <addAttribute tag="$FBProvider" name="android:name" value="com.facebook.FacebookContentProvider" />
        <addAttribute tag="$FBProvider" name="android:authorities" value="com.facebook.app.FacebookContentProvider211842450799275" />
        <addAttribute tag="$FBProvider" name="android:exported" value="true" />
        <addElement tag="application" name="FBProvider" />

        <setElement result="FBActivity" value="activity" />
        <addAttribute tag="$FBActivity" name="android:name" value="com.facebook.FacebookActivity" />
        <addAttribute tag="$FBActivity" name="android:configChanges" value="keyboard|keyboardHidden|screenLayout|screenSize|orientation" />
        <addAttribute tag="$FBActivity" name="android:label" value="sd" />
        <addElement tag="application" name="FBActivity" />

        <setElement result="FBCustomActivity" value="activity" />
        <addAttribute tag="$FBCustomActivity" name="android:name" value="com.facebook.CustomTabActivity" />
        <addAttribute tag="$FBCustomActivity" name="android:exported" value="true" />
        
        <setElement result="IntentFilterElement" value="intent-filter"/>
        <addElements tag="$IntentFilterElement">
            <action android:name="android.intent.action.VIEW"/>
            <category android:name="android.intent.category.DEFAULT"/>
            <category android:name="android.intent.category.BROWSABLE"/>
            <data android:scheme="@string/gsdk_account_fb_login_protocol_scheme" />
        </addElements>
        <addElement tag="$FBCustomActivity" name="IntentFilterElement"/>
        
        <addElement tag="application" name="FBCustomActivity" />
		
		<setElement result="IntransitActivity" value="activity" />
        <addAttribute tag="$IntransitActivity" name="android:name" value="com.bytedance.ttgame.module.push.IntransitActivity" />
        <addAttribute tag="$IntransitActivity" name="android:launchMode" value="singleTask" />
        
        <setElement result="IntentFilterElement" value="intent-filter"/>
        <addElements tag="$IntentFilterElement">
            <action android:name="com.ss.android.sdk.snssdkgpush283800579458"/>
            <category android:name="android.intent.category.DEFAULT"/>
        </addElements>
        <addElement tag="$IntransitActivity" name="IntentFilterElement"/>
		<addElements tag="$IntentFilterElement">
            <action android:name="android.intent.action.VIEW"/>
            <category android:name="android.intent.category.DEFAULT"/>
            <category android:name="android.intent.category.BROWSABLE"/>
            <data android:scheme="snssdkgpush283800579458" />
        </addElements>
        <addElement tag="$IntransitActivity" name="IntentFilterElement"/>

		<setElement result="IntentFilterElement" value="intent-filter"/>
		<addElements tag="$IntentFilterElement">
			<action android:name="android.intent.action.VIEW"/>
			<category android:name="android.intent.category.DEFAULT"/>
			<category android:name="android.intent.category.BROWSABLE"/>
			<data android:scheme="https"
				  android:host="gsdktest.onelink.me"
				  android:pathPrefix="/f5Ou" />
		</addElements>
		<addElement tag="activity" name="IntentFilterElement" once="true"/>
		<setElement result="IntentFilterElement" value="intent-filter"/>
		<addElements tag="$IntentFilterElement">
			<action android:name="android.intent.action.VIEW"/>
			<category android:name="android.intent.category.DEFAULT"/>
			<category android:name="android.intent.category.BROWSABLE"/>
			<data android:scheme="snssdk7634://" />
		</addElements>
		<addElement tag="activity" name="IntentFilterElement" once="true"/>
        
        <addElement tag="application" name="IntransitActivity" />
        
		
  <addPermission android:name="com.android.launcher.permission.INSTALL_SHORTCUT" />
  <addPermission android:name="com.android.launcher.permission.UNINSTALL_SHORTCUT" />
  <addPermission android:name="android.permission.READ_APP_BADGE" />
  <addPermission android:name="android.permission.UPDATE_APP_BADGE" />
  <addPermission android:name="com.sec.android.provider.badge.permission.READ" />
  <addPermission android:name="com.sec.android.provider.badge.permission.WRITE" />
  <addPermission android:name="com.htc.launcher.permission.READ_SETTINGS" />
  <addPermission android:name="com.htc.launcher.permission.UPDATE_SHORTCUT" />
  <addPermission android:name="com.sonyericsson.home.permission.BROADCAST_BADGE" />
  <addPermission android:name="com.sonymobile.home.permission.PROVIDER_INSERT_BADGE" />
  <addPermission android:name="com.anddoes.launcher.permission.UPDATE_COUNT" />
  <addPermission android:name="com.majeur.launcher.permission.UPDATE_BADGE" />
  <addPermission android:name="com.huawei.android.launcher.permission.CHANGE_BADGE" />
  <addPermission android:name="com.huawei.android.launcher.permission.READ_SETTINGS" />
  <addPermission android:name="com.huawei.android.launcher.permission.WRITE_SETTINGS" />
  <addPermission android:name="com.oppo.launcher.permission.READ_SETTINGS" />
  <addPermission android:name="com.oppo.launcher.permission.WRITE_SETTINGS" />
  <addPermission android:name="me.everything.badger.permission.BADGE_COUNT_READ" />
  <addPermission android:name="me.everything.badger.permission.BADGE_COUNT_WRITE" />
  <addPermission android:name="com.vivo.notification.permission.BADGE_ICON" />
  <addPermission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
  <addPermission android:name="android.permission.VIBRATE" />

    </androidManifestUpdates>
    
    <androidStringsUpdates>
        <setElement result="facebook_app_id" value="string" text="211842450799275"/>
			<addAttribute tag="$facebook_app_id" name="name" value="gsdk_account_facebook_app_id" />
        <addElement tag="resources" name="facebook_app_id" />
        <setElement result="facebook_protocol" value="string" text="fb211842450799275"/>
			<addAttribute tag="$facebook_protocol" name="name" value="gsdk_account_fb_login_protocol_scheme" />
        <addElement tag="resources" name="facebook_protocol" />
		<setElement result="com_vk_sdk_AppId" value="integer" text="7974287"/>
			<addAttribute tag="$com_vk_sdk_AppId" name="name" value="com_vk_sdk_AppId" />
			<addAttribute tag="$com_vk_sdk_AppId" name="translatable" value="false" />
        <addElement tag="resources" name="com_vk_sdk_AppId" />
    </androidStringsUpdates>

    <gameActivityImportAdditions>
        <insert>
import com.bytedance.ttgame.base.GSDKError;
import com.bytedance.ttgame.rocketapi.Rocket;
import com.bytedance.ttgame.rocketapi.account.IAccountCallback;
import com.bytedance.ttgame.rocketapi.account.UserInfoResult;
import com.bytedance.ttgame.rocketapi.callback.InitCallback; 
import com.bytedance.ttgame.rocketapi.callback.InitResult;
import com.bytedance.ttgame.rocketapi.account.ISwitchCallback;
import com.bytedance.ttgame.rocketapi.IRocketApi;
import com.bytedance.ttgame.module.fileupload.api.IFileUploadService;
import com.bytedance.ttgame.module.crash.api.ICrashService;
import com.bytedance.ttgame.rocketapi.callback.StateChangedCallback;
import com.bytedance.ttgame.rocketapi.account.AgeGateResult;
import androidx.annotation.Nullable;
import notchtools.geek.com.notchtools.NotchTools;
import notchtools.geek.com.notchtools.core.NotchProperty;
import notchtools.geek.com.notchtools.core.OnNotchCallBack;
import notchtools.geek.com.notchtools.helper.NotchStatusBarUtils;
import com.bytedance.ttgame.rocketapi.callback.IEmulatorCallback;
import com.bytedance.ttgame.module.webview.api.IWebViewErrorCodeCallback;
import com.bytedance.ttgame.module.webview.api.IWebViewService;
import com.bytedance.ttgame.module.push.api.IPushCallback;
import com.bytedance.ttgame.module.push.api.IPushService;
import com.bytedance.ttgame.module.push.api.PushInfo;
import com.bytedance.ttgame.module.cdkey.api.CDKeyInfo;
import com.bytedance.ttgame.module.cdkey.api.CDkeyExchangeResult;
import com.bytedance.ttgame.module.cdkey.api.ICDKeyService;
import com.bytedance.ttgame.module.netexperience.api.INetDiagnosisCallback;
import com.bytedance.ttgame.module.netexperience.api.INetDiagnosisRequest;
import com.bytedance.ttgame.module.netexperience.api.INetExperienceService;
import com.bytedance.ttgame.module.netexperience.api.NetDetectType;
import com.bytedance.ttgame.module.netexperience.api.NetExperienceRequestType;
import com.google.gson.Gson;
        </insert>
    </gameActivityImportAdditions>
    <gameActivityOnCreateFinalAdditions>
        <insert>
		InitGsdk();
		Report("guide_flow", "game_start", "1","");
  
        NotchTools.getFullScreenTools().fullScreenUseStatusForActivityOnCreate(this, this);
		
		Rocket.getInstance().getComponent(IPushService.class).addPushCallback(new IPushCallback() {
			@Override
			public void onReceivedPush(PushInfo pushInfo) {
				Log.verbose("msgpush onReceivedPush url=" + pushInfo.getOpenUrl() + ",ext="+pushInfo.getExt());
				String openUrl = pushInfo.getOpenUrl();
				if(openUrl != null) {
					openUrl = openUrl.toLowerCase();
					if (openUrl.startsWith("http"))
						OpenUrl("", pushInfo.getOpenUrl(), "");
				}
			}
		});
		
        </insert>
    </gameActivityOnCreateFinalAdditions>
    <gameActivityClassAdditions>
		<insert>
	public boolean isGsdkInit = false;
	private boolean mIsEmulator = false;
	private final int  mPlatformId = 3;
	private final int mProjectId = 7634;
	private  String mChannelId = "Bytes";
	private  String mDeviceId;
	private  String mUserAgreementUrl;
	private  String mPrivacyPlicyUrl;
	private  boolean mListenBatteryChange = false;
	public void GetPlatformInfo(){
		mChannelId = Rocket.getInstance().getComponent(IRocketApi.class).getChannelOp(this);
		mDeviceId = Rocket.getInstance().getDeviceID(this);
		NativeCalls.UELogLog("GetPlatformInfo ,mChannelId="+mChannelId + ",mDeviceId="+mDeviceId);
		NativeCallBack.SetPlatformInfo(mPlatformId, String.valueOf(mProjectId), mChannelId, mDeviceId);
	}

	public void InitGsdk() {
		if(isGsdkInit)
			return;
		Report("guide_flow", "gsdk_init_start", "2","");
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().init(Get().getApplication(), new InitCallback() {
					@Override
					public void onSuccess(InitResult initResult) {
						isGsdkInit = true;
						Report("guide_flow", "gsdk_init_success", "3","");
						Log.verbose("gsdk  to get isEmulator in  gsdk had init" );
						Rocket.getInstance().isEmulator(new IEmulatorCallback&lt;Boolean&gt;() {
							@Override
							public void onSuccess(Boolean result, String emulatorType){
								mIsEmulator = result;
								Log.verbose("gsdk get   isEmulator result " + result + emulatorType);
							}
							@Override
							public void onFailed(GSDKError gsdkError) {
								NativeCalls.UELogError("gsdk get   isEmulator error " + gsdkError.toString());
							}
						});						
					}
					@Override
					public void onFailed(GSDKError gsdkError) {
						isGsdkInit = false;
						NativeCalls.UELogError("gsdk init failed code:" + gsdkError.getCode() + " message:" + gsdkError.getMessage());
						InitGsdk();
					}
				});
			}
		});
	}

	public boolean GsdkIsInit() {
		return isGsdkInit;
	}
	
	public String GetUserAgreementUrl(){
		return mUserAgreementUrl;
	}

	public String GetPrivacyPolicy(){
		return mPrivacyPlicyUrl;
	}

	public void LoginNoUi(int nType) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().authLogin(Get(), nType, new IAccountCallback&lt;UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						Gson gson = new Gson();
						String jsonData = gson.toJson(result.data.getExtraData());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogin, true, result.data.getToken(), jsonData);
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk login failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogin, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}
				});
			}
		});
	}

	public void GuestLogin() {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Report("guide_flow", "byte_sdk_guest_login", "63","");
				Rocket.getInstance().guestLogin(Get(), new IAccountCallback &lt;UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						Gson gson = new Gson();
						String jsonData = gson.toJson(result.data.getExtraData());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogin, true, result.data.getToken(), jsonData);
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk login failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogin, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}
				});
			}
		});
	}
	
	public void NetDiagnosis(String target,  int timeout){
		INetDiagnosisRequest mNetDiagnosisRequest =  Rocket.getInstance().getComponent(INetExperienceService.class).createRequest(NetExperienceRequestType.DIAGNOSE_TARGET, target, NetDetectType.NET_DETECT_ICMP_PING, timeout, new INetDiagnosisCallback() {
			@Override
			public void onDiagnosisComplete(GSDKError error, String report) {
                if(error.getCode() == 0)
			        NativeCallBack.NetDiagnosisCallback(true, 0, report);
                else
                    NativeCallBack.NetDiagnosisCallback(false, error.getCode(), error.getMessage());
			}
		});
		mNetDiagnosisRequest.start();
	}
	
	public void VerifyActivationCode(String code){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().verifyActivationCodeWithoutUI(code, new IAccountCallback&lt;UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						Gson gson = new Gson();
						String jsonData = gson.toJson(result.data.getExtraData());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogin, true, result.data.getToken(), jsonData);
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk login failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogin, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}
				});
			}
		});
	}

	public void Logout() {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().logout(Get(), new IAccountCallback &lt; UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						//UserInfoResult只使用code和message
						//登出成功
						NativeCallBack.AccountCallback(NativeCallBack._accountLogout, true, "0", "");
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk Logout failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogout, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}
				});
			}
		});
	}

	public void GetHistoryAccounts() {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().getHistoryAccount(new IAccountCallback&lt;List&lt;com.bytedance.ttgame.rocketapi.account.ExtraData&gt;&gt;() {
					@Override
					public void onSuccess(@Nullable List&lt;com.bytedance.ttgame.rocketapi.account.ExtraData&gt; result) {
						//历史帐号，重点关注userid
						List&lt;String&gt; accouts = new ArrayList&lt;String&gt;();
						Gson gson = new Gson();
						for (com.bytedance.ttgame.rocketapi.account.ExtraData data : result) {
							String jsonData = gson.toJson(data);
							accouts.add(jsonData);
						}
						NativeCallBack.HistoryAccountsCallback(true, accouts);
						if(accouts.size() == 0)
							Report("guide_flow", "byte_sdk_history_users_null", "62","");
					}

					@Override
					public void onFailed(@Nullable List&lt;com.bytedance.ttgame.rocketapi.account.ExtraData&gt; exception) {
						Log.verbose("sdk GetHistoryAccounts failed " + exception.toString());
						NativeCallBack.HistoryAccountsCallback(false, null);
					}
				});
			}
		});
	}
	
	public void DeleteHistoryAccount(long userid){
		Rocket.getInstance().deleteHistoryAccount(userid, new IAccountCallback&lt;Boolean&gt;() {
			@Override
			public void onSuccess(@Nullable Boolean result) {
				NativeCallBack.DeleteHistoryAccountCallback(true, userid);
			}

			@Override
			public void onFailed(@Nullable Boolean exception) {
				NativeCallBack.DeleteHistoryAccountCallback(false, userid);
			}
		});
	}

	public void SwitchAccount(long userid) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().switchAccountNoUI(userid, new ISwitchCallback&lt;UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						Gson gson = new Gson();
						String jsonData = gson.toJson(result.data.getExtraData());
						NativeCallBack.AccountCallback(NativeCallBack._accountSwitch, true, result.data.getToken(), jsonData);
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk SwitchAccount failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountSwitch, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}

					@Override
					public void onLogout(@Nullable UserInfoResult result) {
					}
				});
			}
		});
	}

	public void AccountBind(int nAccoutType) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().authBindNoUI(Get(), nAccoutType, new IAccountCallback&lt;UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						Gson gson = new Gson();
						String jsonData = gson.toJson(result.data.getExtraData());
						NativeCallBack.AccountCallback(NativeCallBack._accountBind, true, result.data.getToken(), jsonData);
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk AccountBind failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountBind, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}
				});
			}
		});
	}

	public void AccountForceRebend(int type, int force) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().forceRebindNoUI(Get(), type, force, new IAccountCallback&lt;UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						Gson gson = new Gson();
						String jsonData = gson.toJson(result.data.getExtraData());
						NativeCallBack.AccountCallback(NativeCallBack._accountBind, true, result.data.getToken(), jsonData);
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk AccountBind failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountBind, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}
				});
			}
		});
	}

	public void AccountUnBind(int nAccountType) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().unBindNoUI(Get(), nAccountType, new IAccountCallback&lt;UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						Gson gson = new Gson();
						String jsonData = gson.toJson(result.data.getExtraData());
						NativeCallBack.AccountCallback(NativeCallBack._accountUnBind, true, result.data.getToken(), jsonData);
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk AccountBind failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountUnBind, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}
				});
			}
		});
	}

	public boolean CanAutoLogin() {
		boolean bCanAuto = Rocket.getInstance().isCanAutoLoginNoUI();
		if(bCanAuto)
			Report("guide_flow", "byte_sdk_can_auto_login", "60","");
		else
			Report("guide_flow", "byte_sdk_cannot_auto_login", "61","");
		return bCanAuto;
	}

	public void AutoLogin() {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Report("guide_flow", "byte_sdk_os_auto_login", "64","");
				Rocket.getInstance().autoLoginNoUI(new IAccountCallback&lt;UserInfoResult&gt;() {
					@Override
					public void onSuccess(@Nullable UserInfoResult result) {
						Gson gson = new Gson();
						String jsonData = gson.toJson(result.data.getExtraData());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogin, true, result.data.getToken(), jsonData);
					}

					@Override
					public void onFailed(@Nullable UserInfoResult exception) {
						Log.verbose("sdk login AutoLogin failed " + exception.gsdkError.toString());
						NativeCallBack.AccountCallback(NativeCallBack._accountLogin, false, String.valueOf(exception.gsdkError.getCode()), exception.gsdkError.getMessage());
					}
				});
			}
		});
	}

	public String GetLatestUserInfo() {
		Gson gson = new Gson();
		return gson.toJson(Rocket.getInstance().getLatestUserInfoSync());
	}

	public boolean IsLogin() {
		return Rocket.getInstance().isLogin();
	}

	public void OpenUrl(String title, String url, String extraData){
		Rocket.getInstance().getComponent(IWebViewService.class).showWebView(this, title, url,
				new IWebViewErrorCodeCallback(){
					@Override
					public void onErrorResponse(GSDKError response){
						Log.verbose("openurl error " + response.toString());
					}
				}
		);
	}

	public void SetDebug(boolean bDebug) {
		//国内用 RocketCn ？？
		Rocket.getInstance().setDebug(this, bDebug);
	}

	public void setSandboxEnable(boolean enable) {
		Rocket.getInstance().setSandboxEnable(this, enable);
	}

	public boolean IsEmulator() {			
		return mIsEmulator;
	}

	public double GetBatteryLevel() {
		if(!mListenBatteryChange ){
			mListenBatteryChange = true;
			Rocket.getInstance().batteryRegisterReceiver(Get(), new StateChangedCallback() {
				@Override
				public void stateChanged(boolean status) {
					NativeCallBack.BatteryStateChangeCallback(status);
				}
			});
		}
		return Rocket.getInstance().getBatteryLevel(this);
	}

	public boolean CheckProtocolVersion() {
		return Rocket.getInstance().checkProtocolVersion();
	}
	
	public String GetSdkOpenId()
	{
		return Rocket.getInstance().getSdkOpenId(this);
	}

	private static boolean isInteger(String str) {
		Pattern pattern = Pattern.compile("^[-\\+]?[\\d]*$");
		return pattern.matcher(str).matches();
	}
	private int mReportUuseruniqueid = 1;
	public void Report(String event, String paramsName, String value, String extraData) {
		JSONObject jsonObject = new JSONObject();
		Log.verbose("Report event=" + event + ",paramsName=" + paramsName + ",value="+value);
		try {
			if(event.compareTo("guide_flow") == 0) {
				jsonObject.put("time", System.currentTimeMillis() / 1000);
				jsonObject.put("app_id", mProjectId);
				jsonObject.put("event", event);
				jsonObject.put("user_unique_id", String.valueOf(mReportUuseruniqueid) + "___");
				jsonObject.put("real_package_name", "___");
				if(!isInteger(value)){
					NativeCalls.UELogError("sdk,report data, guide_flow, guide_id=" + value + ",paramsName=" +paramsName);
					return;
				}
				int nGuideId = Integer.parseInt(value);
				jsonObject.put("guide_id", nGuideId);
				jsonObject.put("duration", 0);
				mReportUuseruniqueid++;
				if (mReportUuseruniqueid == 1000)
					mReportUuseruniqueid = 1;
				Rocket.getInstance().getComponent(IRocketApi.class).onEvent(event, jsonObject);
			}
			
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	public void UploadFile(String filePath, long roleid, String roleName){
		Map&lt;String, String&gt; map = new HashMap&lt;&gt;();
		map.put("RoleId", String.valueOf(roleid));
		map.put("RoleName", roleName);
		Rocket.getInstance().getComponent(IFileUploadService.class).uploadFileAtPath("","", map, filePath, succ -&gt;{
			NativeCallBack.UpdateFileCallback(succ, filePath);
		});
	}
	
	public void UploadException(String name, String reason, String stackTrace){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().getComponent(ICrashService.class).reportCrash( reason, name,stackTrace);
			}
		});
	}

	public int GetCurrentNetState(){
		return Rocket.getInstance().getComponent(IRocketApi.class).getCurrentNetState(this);
	}
	
	public void JudgeAgeGate(){
		Rocket.getInstance().judgeAgeGate(new IAccountCallback&lt;AgeGateResult&gt;() {
			@Override
			public void onSuccess(@Nullable AgeGateResult result) {				
				NativeCallBack.AgeGateCallback(true, result.getCurrentTimeStamp(),
						result.getWindowType(), result.getLimitAge(),result.isInCoolingPeriod(), "");
			}

			@Override
			public void onFailed(@Nullable AgeGateResult exception) {
				NativeCallBack.AgeGateCallback(false,0,exception.getGsdkError().getCode(),0,false,
						exception.getGsdkError().getMessage());
			}
		});
	}

	public void ModifyAgeGateStatus(boolean status){
		Rocket.getInstance().modifyAgeGateStatus(status);
	}

	public boolean QueryAgeGateStatus(){
		return  Rocket.getInstance().queryAgeGateStatus();
	}
	
	public void CDKeyExchange(String cdkey, String roleid, String serverid){
		CDKeyInfo cdKeyInfo = new CDKeyInfo(cdkey, roleid, serverid);
		Rocket.getInstance().getComponent(ICDKeyService.class).cdkeyExchange(cdKeyInfo, new ICDKeyService.CDKeyExchangeCallback() {
			@Override
			public void onSuccess(CDkeyExchangeResult cDkeyExchangeResult) {
				NativeCallBack.CDKeyExchangeCallback(true, cDkeyExchangeResult.getCode(),cDkeyExchangeResult.getMessage());
			}

			@Override
			public void onFail(GSDKError gsdkError) {
				NativeCallBack.CDKeyExchangeCallback(false, gsdkError.getCode(), gsdkError.getMessage());
			}
		});
	}

	@Override
	public void onNotchPropertyCallback(NotchProperty notchProperty) {
		int marginTop = notchProperty.getMarginTop();
		android.view.Display display = getWindowManager().getDefaultDisplay();
		android.graphics.Point displaySize = new android.graphics.Point();
		display.getRealSize(displaySize);
		int barHeigth = NotchStatusBarUtils.getStatusBarHeight(Get().getApplicationContext());
		if (!notchProperty.isNotch()) {
			float nRate = 0;
			if (displaySize.y &gt; displaySize.x)
				nRate = ((float) displaySize.y) / displaySize.x;
			else
				nRate = ((float) displaySize.x) / displaySize.y;
			//19:6  =1.7777777778
			if (nRate &gt; 1.8) {
				marginTop = barHeigth;
			}
		} else {
			if (notchProperty.getNotchIsHide()) {
				marginTop = 0;
				Log.verbose("[saftzone]NotchIsHide");
			} else
				marginTop = Math.max(marginTop, barHeigth);
		}

		// store safezone independent of resolution
		float invX = 1.0f / (displaySize.x != 0.0f ? displaySize.x : 1.0f);

		safezoneF.left = (safezone.left = marginTop) * invX;
		safezoneF.top = 0;
		safezoneF.right = (safezone.right = marginTop) * invX;
		safezoneF.bottom = 0;
		Log.verbose("[saftzone]to nativeSetSafezoneInfo, height= " + marginTop + ",Resolution=" + displaySize.toString() + ",saft=" + safezoneF.toString() + ",ismotch=" + notchProperty.isNotch() + ",ishide=" + notchProperty.getNotchIsHide());
		nativeSetSafezoneInfo(displaySize.y &gt; displaySize.x, safezoneF.left, safezoneF.top, safezoneF.right, safezoneF.bottom);
	}

	@Override
	public void onWindowFocusChanged(boolean hasFocus) {
		if (hasFocus) {
			NotchTools.getFullScreenTools().fullScreenUseStatusForOnWindowFocusChanged(this, this);
		}
		super.onWindowFocusChanged(hasFocus);
	}

	public void RestartApplication( ) {
		Context context = getApplicationContext();
		PackageManager pm = context.getPackageManager();
		Intent intent = pm.getLaunchIntentForPackage(context.getPackageName());
		int delayTime = 500;
		AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
		PendingIntent restartIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
		alarmManager.set(AlarmManager.RTC, System.currentTimeMillis() + delayTime, restartIntent);
		System.exit(0);
	}
        	
		</insert>
    </gameActivityClassAdditions>
    <gameActivityImplementsAdditions>
        <insert>OnNotchCallBack,</insert>
    </gameActivityImplementsAdditions>
</root>