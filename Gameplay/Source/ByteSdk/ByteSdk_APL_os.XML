<?xml version="1.0" encoding="utf-8"?>
<root  xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools">
    <init>
        <log text="ByteSdk_APL INIT"/>
    </init>

	
    <buildscriptGradleAdditions>
        <insert>
repositories {
    maven {
        url 'https://artifact.bytedance.com/repository/ttgamesdk'
    }
}
dependencies {
    classpath 'com.bytedance.ttgame:gsdk_plugin:317.0-i18n'
    classpath 'com.google.gms:google-services:4.2.0'
}
    </insert>
    </buildscriptGradleAdditions>

    <buildGradleAdditions>
        <insert>
dependencies {
	implementation('com.google.code.gson:gson:2.8.9')
}
apply plugin: 'g.gsdk' // 跟在com.android.application或者com.android.library引入语句的后面

gsdk {
        //请手动替换为游戏真实的app_id，并解开注释
        appId = '7634'
        it.version = '3.17.3.0'
		region = 'i18n'
		optionalModules='rating,core,crash,geas,upgrade'
		componentSpec {
			account {
				it.version='3.17.3.0'
				it.abilities='AccountCommon,AccountFacebook,AccountGoogle,AccountGooglePlay,AccountKakaoTalk,AccountLine,AccountTikTok,AccountTwitter,AccountVK'
			}
			adattribution {
				it.version='3.17.3.0'
				it.abilities='AppsFlyer,Firebase'
			}
			compliance {
				it.version='3.17.3.0'
				it.abilities='ComplianceAgeGate,ComplianceCookie,CompliancePermission,ComplianceProtocol,ComplianceRealName'
			}
			friendchain {
				it.version='3.17.3.0'
				it.abilities='FriendChain'
			}
			gna {
				it.version='3.17.3.2'
				it.abilities='GNA'
			}
			gpm {
				it.version='3.17.0.0'
				it.abilities='GPM'
			}
			gameprotect {
				it.version='3.17.3.1'
				it.abilities='GameProtect'
			}
			rating {
				it.abilities='AppScore'
			}
			core {
				it.abilities='Core'
			}
			crash {
				it.abilities='Crash'
			}
			upgrade {
				it.abilities='ForceUpdate'
			}
			geas {
				it.abilities='GEAS'
			}
			pay {
				it.version='3.17.3.0'
				it.abilities='Pay'
			}
			push {
				it.version='3.17.3.0'
				it.abilities='Push'
			}
			rtc {
				it.version='3.37.503.005010'
				it.abilities='RTC'
			}
			share {
				it.version='3.17.3.0'
				it.abilities='ShareFacebook,ShareImage,ShareInstagram,ShareLine,ShareMessenger,ShareTwitter,ShareVK,ShareWhatsApp'
			}
			webview {
				it.version='3.17.2.0'
				it.abilities='Webview'
			}
		}
    }
android {
       defaultConfig {
            manifestPlaceholders = [
                appAuthRedirectScheme: applicationId
            ]
       }
}
apply plugin: 'com.google.gms.google-services'
    </insert>
    </buildGradleAdditions>
    
    <resourceCopies>
        <copyFile src="$S(PluginDir)/Private/Android/CopyFiles/config.json" dst="$S(BuildDir)/assets/config.json" force="true"/>
        <copyDir src="$S(PluginDir)/Private/Android/CopyFiles/src/com/epicgames/unreal" dst="$S(BuildDir)/src/com/epicgames/unreal" />
        <copyFile src="$S(PluginDir)/Private/Android/CopyFiles/google-services.json" dst="$S(BuildDir)/gradle/app/google-services.json" force="true"/>
        <copyDir src="$S(PluginDir)/Private/Android/CopyFiles/notchtools" dst="$S(BuildDir)/src/notchtools"/>
		<copyDir src="$S(PluginDir)/Private/Android/CopyFiles/$S(Architecture)" dst="$S(BuildDir)/libs/$S(Architecture)"/>
		<copyDir src="$S(PluginDir)/Private/Android/CopyFiles/res_os" dst="$S(BuildDir)/res"/>
		<copyFile src="$S(PluginDir)/Private/Android/CopyFiles/gna_hook_request.yaml" dst="$S(BuildDir)/assets/gna_hook_request.yaml" force="true"/>
    </resourceCopies>

    <gameApplicationSuperClass>
        <insert>RocketApplication</insert>
    </gameApplicationSuperClass>
    <gameApplicationImportAdditions>
        <insert>
import com.bytedance.ttgame.rocketapi.Rocket;
import com.bytedance.ttgame.rocketapi.RocketApplication;
import com.bytedance.ttgame.module.appsflyer.api.AppsFlyerDeepLinkCallback;
import com.bytedance.ttgame.module.appsflyer.api.IAppsFlyerService;
import java.util.Map;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import com.bytedance.ttgame.module.push.api.IPushCallback;
import com.bytedance.ttgame.module.push.api.IPushService;
import com.bytedance.ttgame.module.push.api.PushInfo;
import android.content.Intent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import android.app.Activity;
import java.util.Date;
        </insert>
    </gameApplicationImportAdditions>
    <gameApplicationClassAdditions>
	<insert>
public static String mHotPatcherSoPath = "jniLibs";
	public static final String mUnrealSoHotPatcherName = "libUnreal_update.so";
	private void CheckSoUpdate(){
		String strDownloadResPath;
		File external = getExternalFilesDir(null);
		if (external != null &amp;&amp;  external.exists()) {
			strDownloadResPath = external.getAbsolutePath() + "/Res/";
		} else {
			strDownloadResPath = getFilesDir().getAbsolutePath() + "/Res/";
		}

		String apkPath = getPackageCodePath();
		File apkFile = new File(apkPath);
		File soUpdateDir = this.getDir("jniLibs", Activity.MODE_PRIVATE);
		mHotPatcherSoPath = soUpdateDir.getAbsolutePath()+ File.separator;
		if(HotPatcher.FileisExist(strDownloadResPath + mUnrealSoHotPatcherName)){
			HotPatcher.CopyFile(strDownloadResPath + mUnrealSoHotPatcherName, mHotPatcherSoPath + mUnrealSoHotPatcherName);
			HotPatcher.DeleteFile(strDownloadResPath + mUnrealSoHotPatcherName);
		}
		File hotSoFilePath = new File(mHotPatcherSoPath + "libUnreal.so");		
		File reNameSoFile = new File(mHotPatcherSoPath + mUnrealSoHotPatcherName);
		if(reNameSoFile.exists()){
			if (hotSoFilePath.exists()){
				Log.verbose("[HotPatcher] delete old libUnreal.so");
				hotSoFilePath.delete();
			}
			if (apkFile.lastModified() > reNameSoFile.lastModified()) {
				Log.verbose("[HotPatcher]apk is new version,delete update copy.so and Res apk=" + new Date(apkFile.lastModified()).toString()+",so=" + new Date(reNameSoFile.lastModified()).toString());
				reNameSoFile.delete();
				HotPatcher.DeleteFile(strDownloadResPath);
				return;
			}
			if (!HotPatcher.FileisExist(strDownloadResPath)) {
				Log.verbose("[HotPatcher]streamassets/Res not exist,delete update copy.so");
				reNameSoFile.delete();
				return;
			}
			reNameSoFile.renameTo(hotSoFilePath);
		}
		else{
			if (hotSoFilePath.exists()) {
				if (!HotPatcher.FileisExist(strDownloadResPath)) {
					Log.verbose("[HotPatcher]streamassets/Res not exist,delete update so");
					hotSoFilePath.delete();
					return;
				}
				if (apkFile.lastModified() > hotSoFilePath.lastModified()) {
					Log.verbose("[HotPatcher]apk is new version,delete update so and Res apk=" + new Date(apkFile.lastModified()).toString()+",so=" + new Date(hotSoFilePath.lastModified()).toString());
					hotSoFilePath.delete();
					HotPatcher.DeleteFile(strDownloadResPath);
					return;
				}
			}
		}

		if (hotSoFilePath.exists()) {
			try {
				HotPatcher.installNativeLibraryPath(this.getApplicationContext().getClassLoader(), soUpdateDir);
				Log.verbose("[HotPatcher]installNativeLibraryPath");
			} catch (Throwable e) {
				Log.error("[HotPatcher]installNativeLibraryPath error " + e.toString());
			}
		}
	}
	</insert>
    </gameApplicationClassAdditions>
    <gameApplicationOnCreateAdditions>
		<insert>
		Rocket.getInstance().getComponent(IAppsFlyerService.class).setAFDeepLinkDataCallback(new AppsFlyerDeepLinkCallback() {
			@Override
			public void onAppsFlyerDeepLinking(Map&lt;String, String&gt; data) {
				Log.verbose("AFDeepLinkCallback data=" + data.toString());
			}		
		});    
		ApplicationInfo applicationInfo = null;
        try {
            applicationInfo = getPackageManager().getApplicationInfo(getPackageName(),
                    PackageManager.GET_META_DATA);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        if(applicationInfo == null){
            throw new IllegalArgumentException(" get application info = null ");
        }
		if(!applicationInfo.metaData.containsKey("android.max_aspec")) {
			float maxAspect = 2.1f;
			if (applicationInfo.metaData.containsKey("com.epicgames.unreal.max_aspect"))
				maxAspect = applicationInfo.metaData.getFloat("com.epicgames.unreal.max_aspect");
			Log.verbose("android.max_aspect will set " + maxAspect);
			applicationInfo.metaData.putFloat("android.max_aspect", maxAspect);
		}
		Context appContext = this;
		Rocket.getInstance().getComponent(IPushService.class).addPushCallback(new IPushCallback() {
			@Override
			public void onReceivedPush(PushInfo pushInfo) {
				Log.verbose("msgpush onReceivedPush url=" + pushInfo.getOpenUrl() + ",ext="+pushInfo.getExt());
				if(GameActivity.Get() == null){
					Intent intent = new Intent(appContext, SplashActivity.class);
					intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
					appContext.startActivity(intent);
					Log.verbose("msgpush GameApplication oncreate gameactivity is null, run splash");
					return;
				}				
				
				Intent intent = new Intent(appContext, GameActivity.class);
				intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
				appContext.startActivity(intent);
				Log.verbose("msgpush GameApplication oncreate gameactivity is runing");
				
				String openUrl = pushInfo.getOpenUrl();
				if(openUrl != null) {
					openUrl = openUrl.toLowerCase();
					if (openUrl.startsWith("http")) {
						GameActivity.OpenUrlBySDk("", pushInfo.getOpenUrl(), "");
					}
				}
			}
		});
		CheckSoUpdate();
	</insert>
    </gameApplicationOnCreateAdditions>

    <androidManifestUpdates>
        <setElement result="FBAppId" value="meta-data" />
        <addAttribute tag="$FBAppId" name="android:name" value="com.facebook.sdk.ApplicationId" />
        <addAttribute tag="$FBAppId" name="android:value" value="@string/gsdk_account_facebook_app_id" />
        <addElement tag="application" name="FBAppId" />

        <setElement result="FBProvider" value="provider" />
        <addAttribute tag="$FBProvider" name="android:name" value="com.facebook.FacebookContentProvider" />
        <addAttribute tag="$FBProvider" name="android:authorities" value="com.facebook.app.FacebookContentProvider211842450799275" />
        <addAttribute tag="$FBProvider" name="android:exported" value="true" />
        <addElement tag="application" name="FBProvider" />

        <setElement result="FBActivity" value="activity" />
        <addAttribute tag="$FBActivity" name="android:name" value="com.facebook.FacebookActivity" />
        <addAttribute tag="$FBActivity" name="android:configChanges" value="keyboard|keyboardHidden|screenLayout|screenSize|orientation" />
        <addAttribute tag="$FBActivity" name="android:label" value="sd" />
        <addElement tag="application" name="FBActivity" />

        <setElement result="FBCustomActivity" value="activity" />
        <addAttribute tag="$FBCustomActivity" name="android:name" value="com.facebook.CustomTabActivity" />
        <addAttribute tag="$FBCustomActivity" name="android:exported" value="true" />
        
        <setElement result="IntentFilterElement" value="intent-filter"/>
        <addElements tag="$IntentFilterElement">
            <action android:name="android.intent.action.VIEW"/>
            <category android:name="android.intent.category.DEFAULT"/>
            <category android:name="android.intent.category.BROWSABLE"/>
            <data android:scheme="@string/gsdk_account_fb_login_protocol_scheme" />
        </addElements>
        <addElement tag="$FBCustomActivity" name="IntentFilterElement"/>
        
        <addElement tag="application" name="FBCustomActivity" />
		
		<setElement result="IntransitActivity" value="activity" />
        <addAttribute tag="$IntransitActivity" name="android:name" value="com.bytedance.ttgame.module.push.IntransitActivity" />
        <addAttribute tag="$IntransitActivity" name="android:launchMode" value="singleTask" />
		<addAttribute tag="$IntransitActivity" name="android:exported" value="true" />
        
        <setElement result="IntentFilterElement" value="intent-filter"/>
        <addElements tag="$IntentFilterElement">
            <action android:name="com.ss.android.sdk.snssdkgpush283800579458"/>
            <category android:name="android.intent.category.DEFAULT"/>
        </addElements>
        <addElement tag="$IntransitActivity" name="IntentFilterElement"/>
		
		<setElement result="IntentFilterElement" value="intent-filter"/>
		<addElements tag="$IntentFilterElement">
            <action android:name="android.intent.action.VIEW"/>
            <category android:name="android.intent.category.DEFAULT"/>
            <category android:name="android.intent.category.BROWSABLE"/>
            <data android:scheme="snssdkgpush283800579458" />
        </addElements>
        <addElement tag="$IntransitActivity" name="IntentFilterElement"/>

		<setElement result="IntentFilterElement" value="intent-filter"/>
		<addElements tag="$IntentFilterElement">
			<action android:name="android.intent.action.VIEW"/>
			<category android:name="android.intent.category.DEFAULT"/>
			<category android:name="android.intent.category.BROWSABLE"/>
			<data android:scheme="https"
				  android:host="gsdktest.onelink.me"
				  android:pathPrefix="/f5Ou" />
		</addElements>
		<addElement tag="activity" name="IntentFilterElement" once="true"/>
		<setElement result="IntentFilterElement" value="intent-filter"/>
		<addElements tag="$IntentFilterElement">
			<action android:name="android.intent.action.VIEW"/>
			<category android:name="android.intent.category.DEFAULT"/>
			<category android:name="android.intent.category.BROWSABLE"/>
			<data android:scheme="snssdk7634://" />
		</addElements>
		<addElement tag="activity" name="IntentFilterElement" once="true"/>
        
        <addElement tag="application" name="IntransitActivity" />
		
		<addPermission android:name="android.permission.SYSTEM_ALERT_WINDOW" tools:node="remove"/>		
  <addPermission android:name="com.android.launcher.permission.INSTALL_SHORTCUT" />
  <addPermission android:name="com.android.launcher.permission.UNINSTALL_SHORTCUT" />
  <addPermission android:name="android.permission.READ_APP_BADGE" />
  <addPermission android:name="android.permission.UPDATE_APP_BADGE" />
  <addPermission android:name="com.sec.android.provider.badge.permission.READ" />
  <addPermission android:name="com.sec.android.provider.badge.permission.WRITE" />
  <addPermission android:name="com.htc.launcher.permission.READ_SETTINGS" />
  <addPermission android:name="com.htc.launcher.permission.UPDATE_SHORTCUT" />
  <addPermission android:name="com.sonyericsson.home.permission.BROADCAST_BADGE" />
  <addPermission android:name="com.sonymobile.home.permission.PROVIDER_INSERT_BADGE" />
  <addPermission android:name="com.anddoes.launcher.permission.UPDATE_COUNT" />
  <addPermission android:name="com.majeur.launcher.permission.UPDATE_BADGE" />
  <addPermission android:name="com.huawei.android.launcher.permission.CHANGE_BADGE" />
  <addPermission android:name="com.huawei.android.launcher.permission.READ_SETTINGS" />
  <addPermission android:name="com.huawei.android.launcher.permission.WRITE_SETTINGS" />
  <addPermission android:name="com.oppo.launcher.permission.READ_SETTINGS" />
  <addPermission android:name="com.oppo.launcher.permission.WRITE_SETTINGS" />
  <addPermission android:name="me.everything.badger.permission.BADGE_COUNT_READ" />
  <addPermission android:name="me.everything.badger.permission.BADGE_COUNT_WRITE" />
  <addPermission android:name="com.vivo.notification.permission.BADGE_ICON" />
  <addPermission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
  <addPermission android:name="android.permission.VIBRATE" />
  <addPermission android:name="android.permission.RECORD_AUDIO" />
  <addPermission android:name="android.permission.WAKE_LOCK" />
  <addPermission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
  <addPermission android:name="android.permission.CHANGE_NETWORK_STATE" />
  <addPermission android:name="android.permission.WRITE_SETTINGS" />
    </androidManifestUpdates>
    
    <androidStringsUpdates>
        <setElement result="facebook_app_id" value="string" text="211842450799275"/>
			<addAttribute tag="$facebook_app_id" name="name" value="gsdk_account_facebook_app_id" />
        <addElement tag="resources" name="facebook_app_id" />
        <setElement result="facebook_protocol" value="string" text="fb211842450799275"/>
			<addAttribute tag="$facebook_protocol" name="name" value="gsdk_account_fb_login_protocol_scheme" />
        <addElement tag="resources" name="facebook_protocol" />
		<setElement result="com_vk_sdk_AppId" value="integer" text="7974287"/>
			<addAttribute tag="$com_vk_sdk_AppId" name="name" value="com_vk_sdk_AppId" />
			<addAttribute tag="$com_vk_sdk_AppId" name="translatable" value="false" />
        <addElement tag="resources" name="com_vk_sdk_AppId" />
    </androidStringsUpdates>

    <gameActivityImportAdditions>
        <insert>
		
import com.bytedance.ttgame.module.gameprotect.api.ISecureService;
import com.bytedance.ttgame.base.GSDKError;
import com.bytedance.ttgame.rocketapi.Rocket;
import com.bytedance.ttgame.rocketapi.account.IAccountCallback;
import com.bytedance.ttgame.rocketapi.account.UserInfoResult;
import com.bytedance.ttgame.rocketapi.callback.InitCallback; 
import com.bytedance.ttgame.rocketapi.callback.InitResult;
import com.bytedance.ttgame.rocketapi.account.ISwitchCallback;
import com.bytedance.ttgame.rocketapi.IRocketApi;
import com.bytedance.ttgame.module.fileupload.api.IFileUploadService;
import com.bytedance.ttgame.module.crash.api.ICrashService;
import com.bytedance.ttgame.rocketapi.callback.StateChangedCallback;
import com.bytedance.ttgame.rocketapi.account.AgeGateResult;
import androidx.annotation.Nullable;
import notchtools.geek.com.notchtools.NotchTools;
import notchtools.geek.com.notchtools.core.NotchProperty;
import notchtools.geek.com.notchtools.core.OnNotchCallBack;
import notchtools.geek.com.notchtools.helper.NotchStatusBarUtils;
import com.bytedance.ttgame.rocketapi.callback.IEmulatorCallback;
import com.bytedance.ttgame.module.webview.api.IWebViewErrorCodeCallback;
import com.bytedance.ttgame.module.webview.api.IWebViewService;
import com.bytedance.ttgame.module.push.api.IPushCallback;
import com.bytedance.ttgame.module.push.api.IPushService;
import com.bytedance.ttgame.module.push.api.ILocalPushCallback;
import com.bytedance.ttgame.module.push.api.PushInfo;
import com.bytedance.ttgame.module.cdkey.api.CDKeyInfo;
import com.bytedance.ttgame.module.cdkey.api.CDkeyExchangeResult;
import com.bytedance.ttgame.module.cdkey.api.ICDKeyService;
import com.bytedance.ttgame.module.gna.api.INetDiagnosisCallback;
import com.bytedance.ttgame.module.gna.api.INetDiagnosisRequest;
import com.bytedance.ttgame.module.gna.api.INetExperienceService;
import com.bytedance.ttgame.module.gna.api.NetDetectType;
import com.bytedance.ttgame.module.gna.api.NetExperienceRequestType;
import com.bytedance.ttgame.module.notice.api.INoticeService;
import com.bytedance.ttgame.module.notice.api.ResponseData;
import com.google.gson.Gson;
import com.ss.bytertc.engine.GameRTCEngine;
import com.ss.bytertc.engine.game.GameRTCEngineConfig;
import com.ss.bytertc.engine.game.GameRTCPositionInfo;
import com.ss.bytertc.engine.game.GameRTCReceiveRange;
import com.ss.bytertc.engine.game.GameRTCRoomConfig;
import com.bytedance.ttgame.module.gna.api.GnaClientAdapter;
import com.bytedance.ttgame.module.gna.api.IGnaClient;
import com.bytedance.ttgame.module.webview.api.IExitWebViewCallback;
import androidx.core.content.ContextCompat;
import android.app.NotificationChannel;
import com.bytedance.ttgame.module.loccom.api.ILocationCommonService;
import com.bytedance.ttgame.module.loccom.api.callback.LocationCallback;
import com.bytedance.ttgame.sdk.module.location.model.Location;
import com.bytedance.ttgame.module.rating.api.configration.IRatingConfig;
import com.bytedance.ttgame.module.rating.api.configration.IRatingUIConfig;
import com.bytedance.ttgame.module.rating.api.IRatingService;
import com.bytedance.ttgame.rocketapi.account.IAccountService;
import com.bytedance.ttgame.rocketapi.minors.IMinorsCallback;
import com.bytedance.ttgame.rocketapi.pay.IPayCallback;
import com.bytedance.ttgame.rocketapi.pay.IQueryProductsCallback;
import com.bytedance.ttgame.rocketapi.pay.QueryGoodsParams;
import com.bytedance.ttgame.rocketapi.pay.RocketGoods;
import com.bytedance.ttgame.rocketapi.pay.RocketPayInfo;
import com.bytedance.ttgame.rocketapi.pay.RocketPayResult;
import com.bytedance.ttgame.rocketapi.pay.RocketProductInfo;
import com.bytedance.ttgame.framework.module.callback.ICallback;
import com.bytedance.ttgame.module.friendchain.api.ChainPermissionResult;
import com.bytedance.ttgame.module.friendchain.api.FriendChainInfoResult;
import com.bytedance.ttgame.module.friendchain.api.IFriendChainService;
import com.bytedance.ttgame.module.firebase.api.IFirebaseService;
import com.bytedance.ttgame.module.rating.api.callback.CustomDialogManager;
import com.bytedance.ttgame.module.rating.api.callback.IRatingDialogCallback;
import com.bytedance.ttgame.module.rating.api.callback.ICustomRatingDialog;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.Enumeration;
import java.io.File;
import com.bytedance.ttgame.module.compliance.api.protocol.IProtocolService;
import androidx.core.app.ActivityCompat;
import com.bytedance.ttgame.module.gna.api.INetMpaService;
import com.bytedance.ttgame.main.module.log.api.ILogService;
        </insert>
    </gameActivityImportAdditions>
    <gameActivityOnCreateFinalAdditions>
        <insert>
		PreStartGsdk();
		Report("guide_flow", "game_start", "1","");
		if(!UseDisplayCutout)
			NotchTools.getFullScreenTools().fullScreenUseStatusForActivityOnCreate(this, this);		
		
		
        </insert>
    </gameActivityOnCreateFinalAdditions>
    <gameActivityClassAdditions>
		<insert>
	private boolean mIsEmulator = false;
	private final int  mPlatformId = 3;
	private final static int mProjectId = 7634;
	private  String mChannelId = "Bytes";
	private  String mDeviceId;
	private  String mUserAgreementUrl;
	private  String mPrivacyPlicyUrl;
	private  boolean mListenBatteryChange = false;
	private GameRTCEngine mVoiceEngine = null;
	private String		  mRoomId = "";
	private static final int PERMISSION_REQUEST_CODE = 1106;
	private boolean bGnaNetMpaSuccess = false;
	private String  strNetMapInitErrorInfo = "";
	public void GetPlatformInfo(){
		mChannelId = Rocket.getInstance().getComponent(IRocketApi.class).getChannelOp(this);
		mDeviceId = Rocket.getInstance().getDeviceID(this);
		NativeCalls.UELogLog("GetPlatformInfo ,mChannelId="+mChannelId + ",mDeviceId="+mDeviceId);
		NativeCallBack.SetPlatformInfo(mPlatformId, String.valueOf(mProjectId), mChannelId, mDeviceId);
	}
	
	public class GameGnaClientAdapter extends GnaClientAdapter {
		private Context mContext;

		GameGnaClientAdapter(Context context) {
			super(context);
			mContext = context;
		}

		@Override
		public boolean enableVerboseLog() {
			return true;
		}
	}

	private void PreStartGsdk() {
		if(SplashActivity.isGsdkInit){
			Rocket.getInstance().isEmulator(new IEmulatorCallback &lt;Boolean&gt;() {
				@Override
				public void onSuccess(Boolean result, String emulatorType){
					mIsEmulator = result;
					Log.verbose("gsdk get   isEmulator result " + result + emulatorType);
				}
				@Override
				public void onFailed(GSDKError gsdkError) {
					NativeCalls.UELogError("gsdk get   isEmulator error " + gsdkError.toString());
				}
			});

			IGnaClient gnaClient = Rocket.getInstance().getComponent(IGnaClient.class);
			gnaClient.tryInitGna(new GameGnaClientAdapter(getApplicationContext()));
			INetMpaService mpaService = Rocket.getInstance().getComponent(INetMpaService.class);
			mpaService.registerCallbacks(new INetMpaService.INetMpaCallback() {
				@Override
				public void onFinish(boolean isSuccess, String extraMsg) {
					bGnaNetMpaSuccess = isSuccess;
					if(!bGnaNetMpaSuccess)
						strNetMapInitErrorInfo = extraMsg;
				}
			}, new INetMpaService.INetMpaSetAddrCallback() {
				@Override
				public void onFinish(boolean isSuccess, String extraMsg, String context) {
					if(isSuccess)
						NativeCallBack.OnNetMpaSetAddressCallback(true, "");
					else
						NativeCallBack.OnNetMpaSetAddressCallback(false, extraMsg);
				}
			}, new INetMpaService.INetMpaCallback() {
				@Override
				public void onFinish(boolean isSuccess, String extraMsg) {

				}
			});
			mpaService.initMpaService();
		}
		else{
			NativeCalls.UELogError("[sdk]gsdk init failed, check network!");
		}		
	}

	public boolean GsdkIsInit() {
		return SplashActivity.isGsdkInit;
	}
	
	public String GetUserAgreementUrl(){
		return mUserAgreementUrl;
	}

	public String GetPrivacyPolicy(){
		return mPrivacyPlicyUrl;
	}

	public void LoginNoUi(int nType) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Report("guide_flow", "100100", "57","");
				Rocket.getInstance().authLogin(Get(), nType, new ByteSdkAccoutCallback(NativeCallBack._accountLogin));
			}
		});
	}

	public void GuestLogin() {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Report("guide_flow", "byte_sdk_guest_login", "63","");
				Report("guide_flow", "100100", "57","");
				Rocket.getInstance().guestLogin(Get(), new ByteSdkAccoutCallback(NativeCallBack._accountLogin));
			}
		});
	}
	
	public void NetDiagnosis(String target,  int timeout){
		INetDiagnosisRequest mNetDiagnosisRequest =  Rocket.getInstance().getComponent(INetExperienceService.class).createRequest(NetExperienceRequestType.DIAGNOSE_TARGET, target, NetDetectType.NET_DETECT_ICMP_PING, timeout, new INetDiagnosisCallback() {
			@Override
			public void onDiagnosisComplete(GSDKError error, String report) {
                if(error.getCode() == 0)
			        NativeCallBack.NetDiagnosisCallback(true, 0, report);
                else
                    NativeCallBack.NetDiagnosisCallback(false, error.getCode(), error.getMessage());
			}
		});
		mNetDiagnosisRequest.start();
	}
	
	public void VerifyActivationCode(String code){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().verifyActivationCodeWithoutUI(code, new ByteSdkAccoutCallback(NativeCallBack._accountLogin));
			}
		});
	}

	public void Logout() {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().logout(Get(), new ByteSdkAccoutCallback(NativeCallBack._accountLogout));
			}
		});
	}

	public void GetHistoryAccounts() {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().getHistoryAccount(new IAccountCallback&lt;List&lt;com.bytedance.ttgame.rocketapi.account.ExtraData&gt;&gt;() {
					@Override
					public void onSuccess(@Nullable List&lt;com.bytedance.ttgame.rocketapi.account.ExtraData&gt; result) {
						//历史帐号，重点关注userid
						List&lt;String&gt; accouts = new ArrayList&lt;String&gt;();
						Gson gson = new Gson();
						for (com.bytedance.ttgame.rocketapi.account.ExtraData data : result) {
							String jsonData = gson.toJson(data);
							accouts.add(jsonData);
						}
						NativeCallBack.HistoryAccountsCallback(true, accouts);
						if(accouts.size() == 0)
							Report("guide_flow", "byte_sdk_history_users_null", "62","");
					}

					@Override
					public void onFailed(@Nullable List&lt;com.bytedance.ttgame.rocketapi.account.ExtraData&gt; exception) {
						Log.verbose("sdk GetHistoryAccounts failed " + exception.toString());
						NativeCallBack.HistoryAccountsCallback(false, null);
					}
				});
			}
		});
	}
	
	public void DeleteHistoryAccount(long userid){
		Rocket.getInstance().deleteHistoryAccount(userid, new IAccountCallback&lt;Boolean&gt;() {
			@Override
			public void onSuccess(@Nullable Boolean result) {
				NativeCallBack.DeleteHistoryAccountCallback(true, userid);
			}

			@Override
			public void onFailed(@Nullable Boolean exception) {
				NativeCallBack.DeleteHistoryAccountCallback(false, userid);
			}
		});
	}

	public void SwitchAccount(long userid) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().switchAccountNoUI(userid, new ByteSdkSwitchAccountCallback());
			}
		});
	}

	public void AccountBind(int nAccoutType) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().authBindNoUI(Get(), nAccoutType, new ByteSdkAccoutCallback(NativeCallBack._accountBind));
			}
		});
	}

	public void AccountForceRebend(int type, int force) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().forceRebindNoUI(Get(), type, force, new ByteSdkAccoutCallback(NativeCallBack._accountBind));
			}
		});
	}

	public void AccountUnBind(int nAccountType) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().unBindNoUI(Get(), nAccountType, new ByteSdkAccoutCallback(NativeCallBack._accountUnBind));
			}
		});
	}

	public boolean CanAutoLogin() {
		boolean bCanAuto = Rocket.getInstance().isCanAutoLoginNoUI();
		if(bCanAuto)
			Report("guide_flow", "byte_sdk_can_auto_login", "60","");
		else
			Report("guide_flow", "byte_sdk_cannot_auto_login", "61","");
		return bCanAuto;
	}

	public void AutoLogin() {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Report("guide_flow", "100100", "57","");
				Rocket.getInstance().autoLoginNoUI(new ByteSdkAccoutCallback(NativeCallBack._accountLogin));
			}
		});
	}

	public String GetLatestUserInfo() {
		Gson gson = new Gson();
		return gson.toJson(Rocket.getInstance().getLatestUserInfoSync());
	}

	public boolean IsLogin() {
		return Rocket.getInstance().isLogin();
	}
	
	public void OpenUrl(String title, String url, String extraData){
		OpenUrlBySDk(title,url,extraData);
	}

	public static void OpenUrlBySDk(String title, String url, String extraData){
		Bundle bundle = new Bundle();
		Rocket.getInstance().getComponent(IWebViewService.class).showWebViewWithCallback(Get(), title, url,bundle,new IExitWebViewCallback() {
					@Override
					public void onExit() {
						NativeCallBack.OnSdkWebViewUrlClosed(url);
					}
				},
				new IWebViewErrorCodeCallback(){
					@Override
					public void onErrorResponse(GSDKError response){
						if(response.isSuccess())
							return;
						NativeCallBack.OnSdkWebViewOpenUrlError(url, response.getCode(), response.getMessage(),
								response.getExtraErrorCode(), response.getExtraErrorMessage(),response.getAdditionalInfo());
					}
				}
		);
	}	

	public void SetDebug(boolean bDebug) {
		//国内用 RocketCn ？？
		Rocket.getInstance().setDebug(this, bDebug);
	}

	public void setSandboxEnable(boolean enable) {
		Rocket.getInstance().setSandboxEnable(this, enable);
	}
	
	public boolean IsSandbox(){
		return Rocket.getInstance().isSandboxEnable(this);
	}			
    
	public boolean IsEmulator() {			
		return mIsEmulator;
	}

	public double GetBatteryLevel() {
		if(!mListenBatteryChange ){
			mListenBatteryChange = true;
			Rocket.getInstance().batteryRegisterReceiver(Get(), new StateChangedCallback() {
				@Override
				public void stateChanged(boolean status) {
					NativeCallBack.BatteryStateChangeCallback(status);
				}
			});
		}
		return Rocket.getInstance().getBatteryLevel(this);
	}
	
	public boolean isCharging(){
		return Rocket.getInstance().isCharging(this);
	}

	public boolean CheckProtocolVersion() {
		return Rocket.getInstance().getComponent(IProtocolService.class).checkProtocolVersion();
	}

	public void SetUserHasAgreedProtocolsUpdate(){
		Rocket.getInstance().getComponent(IProtocolService.class).setUserHasAgreedProtocolsUpdate();
	}
			
	public String GetSdkOpenId()
	{
		return Rocket.getInstance().getSdkOpenId(this);
	}

	private static boolean isInteger(String str) {
		Pattern pattern = Pattern.compile("^[-\\+]?[\\d]*$");
		return pattern.matcher(str).matches();
	}
	private static int mReportUuseruniqueid = 100;
	public void Report(String event, String paramsName, String value, String extraData) {
		SdkReport(event,paramsName,value, extraData );
	}
	
	public static void SdkReport(String event, String paramsName, String value, String extraData) {
		JSONObject jsonObject = new JSONObject();
		Log.verbose("Report event=" + event + ",paramsName=" + paramsName + ",value="+value);
		try {
			if(event.compareTo("guide_flow") == 0) {
				jsonObject.put("time", System.currentTimeMillis() / 1000);
				jsonObject.put("app_id", mProjectId);
				jsonObject.put("event", event);
				jsonObject.put("user_unique_id", String.valueOf(mReportUuseruniqueid) + "___");
				jsonObject.put("real_package_name", "___");
				if(!isInteger(value)){
					NativeCalls.UELogError("sdk,report data, guide_flow, guide_id=" + value + ",paramsName=" +paramsName);
					return;
				}
				int nGuideId = Integer.parseInt(value);
				jsonObject.put("guide_id", nGuideId);
				jsonObject.put("duration", 0);
				jsonObject.put("info",extraData);
				mReportUuseruniqueid++;
				if (mReportUuseruniqueid == 1000)
					mReportUuseruniqueid = 100;
				Rocket.getInstance().getComponent(IRocketApi.class).onEvent(event, jsonObject);
			}
			
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	public void Report(String event, String jsonContent){
		try {
			JSONObject jsonObject = new JSONObject(jsonContent);
			Log.verbose("Report event=" + event + ",content=" + jsonContent);
			if(!jsonContent.contains("time"))
				jsonObject.put("time", System.currentTimeMillis() / 1000);
			if(!jsonContent.contains("app_id"))
				jsonObject.put("app_id", mProjectId);
			if(!jsonContent.contains("event"))
				jsonObject.put("event", event);
			if(!jsonContent.contains("user_unique_id")) {
				if(IsLogin())
					jsonObject.put("user_unique_id", GetSdkOpenId());
				else
					jsonObject.put("user_unique_id", "");
			}
			if(!jsonContent.contains("device_id"))
				jsonObject.put("device_id", mDeviceId);
			
			Rocket.getInstance().getComponent(IRocketApi.class).onEvent(event, jsonObject);
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	public void UploadFile(String filePath, long roleid, String roleName){
		Map&lt;String, String&gt; map = new HashMap&lt;&gt;();
		map.put("RoleId", String.valueOf(roleid));
		map.put("RoleName", roleName);
		Rocket.getInstance().getComponent(IFileUploadService.class).uploadFileAtPath("","", map, filePath, succ -&gt;{
			NativeCallBack.UpdateFileCallback(succ, filePath);
		});
	}
	
	public void UploadException(String name, String reason, String stackTrace){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().getComponent(ICrashService.class).reportCrash( reason, name,stackTrace);
			}
		});
	}

	public int GetCurrentNetState(){
		return Rocket.getInstance().getComponent(IRocketApi.class).getCurrentNetState(this);
	}
	
	public void JudgeAgeGate(){
		Rocket.getInstance().judgeAgeGate(new IAccountCallback&lt;AgeGateResult&gt;() {
			@Override
			public void onSuccess(@Nullable AgeGateResult result) {				
				NativeCallBack.AgeGateCallback(true, result.getCurrentTimeStamp(),
						result.getWindowType(), result.getLimitAge(),result.isInCoolingPeriod(), "");
			}

			@Override
			public void onFailed(@Nullable AgeGateResult exception) {
				NativeCallBack.AgeGateCallback(false,0,exception.getGsdkError().getCode(),0,false,
						exception.getGsdkError().getMessage());
			}
		});
	}

	public void ModifyAgeGateStatus(boolean status){
		Rocket.getInstance().modifyAgeGateStatus(status);
	}

	public boolean QueryAgeGateStatus(){
		return  Rocket.getInstance().queryAgeGateStatus();
	}
	
	public void CDKeyExchange(String cdkey, String roleid, String serverid){
		CDKeyInfo cdKeyInfo = new CDKeyInfo(cdkey, roleid, serverid);
		Rocket.getInstance().getComponent(ICDKeyService.class).cdkeyExchange(cdKeyInfo, new ICDKeyService.CDKeyExchangeCallback() {
			@Override
			public void onSuccess(CDkeyExchangeResult cDkeyExchangeResult) {
				NativeCallBack.CDKeyExchangeCallback(true, cDkeyExchangeResult.getCode(),cDkeyExchangeResult.getMessage());
			}

			@Override
			public void onFail(GSDKError gsdkError) {
				NativeCallBack.CDKeyExchangeCallback(false, gsdkError.getCode(), gsdkError.getMessage());
			}
		});
	}
	
	public void addLocalNotification(String title, String body, long nDelayTime){
		Rocket.getInstance().getComponent(IPushService.class).addLocalNotification(title, body, nDelayTime, null, null, new ILocalPushCallback() {
			@Override
			public void onSuccess(String s) {

			}

			@Override
			public void onFail(GSDKError gsdkError) {

			}
		});
	}
	
	public void fetchNotices(int nScene, String savePath, String language, String otherParams){
		HashMap&lt;String, String&gt; params = new HashMap&lt;&gt;();
		params.put("scene", String.valueOf(nScene));
		params.put("game_language", language);
		List&lt;String&gt; ExParams = Arrays.asList(otherParams.split(","));
		if(ExParams.size() % 2 == 0){
			for(int i=0; i &lt; ExParams.size(); i=i+2){
				params.put(ExParams.get(i), ExParams.get(i+1));
			}
		}
		INoticeService noticeService = Rocket.getInstance().getComponent(INoticeService.class);
		noticeService.fetchNotices(this, params, new INoticeService.FetchNoticesCallback() {
			@Override
			public void onSuccess(ResponseData data) {
				Gson gson = new Gson();
				String jsonData = gson.toJson(data.getData());
				if(savePath != null &amp;&amp; savePath.length() &gt; 10){
					try {
						FileWriter writer = new FileWriter(savePath, false);
						writer.write(jsonData);
						writer.close();
						NativeCallBack.FetchNoticeCallback(true, true, savePath, 0);
					}
					catch (Exception e){
						NativeCalls.UELogError("java wirte file " + savePath + ",errorinfo:" + e.toString());
						NativeCallBack.FetchNoticeCallback(true, false, jsonData, 0);
					}
				}
				else{
					NativeCallBack.FetchNoticeCallback(true, false, jsonData, 0);
				}
			}

			@Override
			public void onFail(GSDKError error) {
				NativeCallBack.FetchNoticeCallback(false, false, error.getMessage(), error.getCode());
			}
		});
	}
	
	private boolean InitVoice(){
		if(mVoiceEngine == null){
			GameRTCEngineConfig config = new GameRTCEngineConfig();
			RTCEventHandler pHandle = new RTCEventHandler();
			mVoiceEngine = GameRTCEngine.create(this, config, pHandle,"");
			if(mVoiceEngine == null){
				Log.verbose("InitVoice GamemVoiceEngine.create return null");
				return false;
			}
			pHandle.SetRtcEngine(mVoiceEngine);
			mVoiceEngine.setAudioScenario(GameRTCEngine.AudioScenarioType.AUDIO_SCENARIO_COMMUNICATION);
		}
		return true;
	}

	private void UnintVoice(){
		if(mVoiceEngine != null){
			GameRTCEngine.destroy();
			mVoiceEngine = null;
		}
	}

	public void VoiceJoinRoom(String roomId, String userid, String token, int roomType, int volumeIndication, boolean enableRangeAudio){
		if(mRoomId != null &amp;&amp; !mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]VoiceJoinRoom,has joinroom=" + roomId);
			return;
		}
		mRoomId = roomId;
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				GameRTCRoomConfig config = new GameRTCRoomConfig();
				if(roomType == 0)
					config.roomType = GameRTCRoomConfig.RoomType.RTC_ROOM_TEAM;
				else
					config.roomType = GameRTCRoomConfig.RoomType.RTC_ROOM_WORLD;
				config.enableRangeAudio = enableRangeAudio;
				config.enableSpatialAudio = false;
				config.audioVolumeIndicationInterval = volumeIndication;
				mVoiceEngine.joinRoom(roomId, userid, token, config);
			}
		});

	}

	public void VoiceLeaveRoom(){
		if(mRoomId == null || mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]leaveroom error,roomid is null.");
			return;
		}
		String tempRoomId = mRoomId;
		mRoomId = "";
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				mVoiceEngine.leaveRoom(tempRoomId);
			}
		});

	}

	public void VoiceUpdateToken(String token){
		if(mRoomId == null || mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]VoiceUpdateToken error,roomid is null.");
			return;
		}
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				mVoiceEngine.updateToken(mRoomId, token);
			}
		});

	}

	public void VoiceSetReceivelRange( int disMin, int disMax ){
		if(mRoomId == null || mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]VoiceSetReceivelRange error,roomid is null.");
			return;
		}
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				GameRTCReceiveRange range = new GameRTCReceiveRange(disMin, disMax);
				mVoiceEngine.updateReceiveRange(mRoomId, range);
			}
		});

	}

	public void VoiceUpdatePostion(int x, int y, int z){
		if(mRoomId == null || mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]VoiceUpdatePostion error,roomid is null.");
			return;
		}
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				GameRTCPositionInfo positionInfo = new GameRTCPositionInfo(x,y,z);
				mVoiceEngine.updatePosition(mRoomId, positionInfo);
			}
		});
	}

	public void VoiceEnableMicrophone(boolean bEnable){
		if(mRoomId == null || mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]VoiceEnableMicrophone error,roomid is null.");
			return;
		}
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				mVoiceEngine.enableMicrophone(mRoomId, bEnable);
				mVoiceEngine.enableAudioSend(mRoomId, bEnable);
			}
		});
	}

	public void VoiceEnableAudioReceive(String userId, boolean bEnable){
		if(mRoomId == null || mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]VoiceEnableAudioReceive error,roomid is null.");
			return;
		}
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				mVoiceEngine.enableAudioReceive(mRoomId, userId, bEnable);
			}
		});
	}

	public void VoiceEnableSpeakerphone(boolean bEnable){
		if(mRoomId == null || mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]VoiceEnableSpeakerphone error,roomid is null.");
			return;
		}
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				mVoiceEngine.enableSpeakerphone(mRoomId, bEnable);
			}
		});
	}
	
	public void VoiceSetRecordingVolume(int volume){
		if(mRoomId == null || mRoomId.isEmpty()){
			NativeCalls.UELogError("[RTC]VoicesetRecordingVolume error,roomid is null.");
			return;
		}
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(!InitVoice())
					return;
				mVoiceEngine.setRecordingVolume(volume);
			}
		});
	}

	public void VoiceSetPlaybackVolume(int volume) {
		if (mRoomId == null || mRoomId.isEmpty()) {
			NativeCalls.UELogError("[RTC]VoiceSetPlaybackVolume error,roomid is null.");
			return;
		}
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if (!InitVoice())
					return;
				mVoiceEngine.setPlaybackVolume(volume);
			}
		});
	}
	
	public void SetUserInfoForSecureService(String roleid, String serverId){
		Rocket.getInstance().getComponent(ISecureService.class).setUserInfo(ByteSdkAccoutCallback.userType,roleid,serverId);
	}

	@Override
	public void onNotchPropertyCallback(NotchProperty notchProperty) {
		int marginTop = notchProperty.getMarginTop();
		android.view.Display display = getWindowManager().getDefaultDisplay();
		android.graphics.Point displaySize = new android.graphics.Point();
		display.getRealSize(displaySize);
		int barHeigth = NotchStatusBarUtils.getStatusBarHeight(Get().getApplicationContext());
		if (!notchProperty.isNotch()) {
			float nRate = 0;
			if (displaySize.y &gt; displaySize.x)
				nRate = ((float) displaySize.y) / displaySize.x;
			else
				nRate = ((float) displaySize.x) / displaySize.y;
			//19:6  =1.7777777778
			if (nRate &gt; 1.8) {
				marginTop = barHeigth;
			}
		} else {
			if (notchProperty.getNotchIsHide()) {
				marginTop = 0;
				Log.verbose("[saftzone]NotchIsHide");
			} else
				marginTop = Math.max(marginTop, barHeigth);
		}

		// store safezone independent of resolution
		float invX = 1.0f / (displaySize.x != 0.0f ? displaySize.x : 1.0f);

		safezoneF.left = (safezone.left = marginTop) * invX;
		safezoneF.top = 0;
		safezoneF.right = (safezone.right = marginTop) * invX;
		safezoneF.bottom = 0;
		Log.verbose("[saftzone]to nativeSetSafezoneInfo, height= " + marginTop + ",Resolution=" + displaySize.toString() + ",saft=" + safezoneF.toString() + ",ismotch=" + notchProperty.isNotch() + ",ishide=" + notchProperty.getNotchIsHide());
		nativeSetSafezoneInfo(displaySize.y &gt; displaySize.x, safezoneF.left, safezoneF.top, safezoneF.right, safezoneF.bottom);
	}
	
	private static final int REQUEST_PERMISSION_SETTING = 1;
	public void OpenAppSetting(){
		Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
		Uri uri = Uri.fromParts("package", getPackageName(), null);
		intent.setData(uri);
		startActivityForResult(intent, REQUEST_PERMISSION_SETTING);
	}
	public boolean IsPermissionGranted(String requestPermission){
		if (ContextCompat.checkSelfPermission(this, requestPermission) != PackageManager.PERMISSION_GRANTED)
		{
			Log.verbose("permission not allow " + requestPermission);
			return false;
		}
		else {
			return true;
		}
	}
	
	public boolean RequestPermission(String requestPermission, boolean bFirstRequest){
		if(bFirstRequest){
			ActivityCompat.requestPermissions(this, new String[]{requestPermission}, PERMISSION_REQUEST_CODE);
			return true;
		}
		else{
			boolean bShowUi = ActivityCompat.shouldShowRequestPermissionRationale(this, requestPermission);
			ActivityCompat.requestPermissions(this, new String[]{requestPermission}, PERMISSION_REQUEST_CODE);
			return bShowUi;
		}
	}
	
	public boolean IsNotificationsAllowed(String channelName){
		boolean bAllowed = NotificationManagerCompat.from(getApplicationContext()).areNotificationsEnabled();
		if(!bAllowed)
			return false;
		if(channelName == null || channelName.length() == 0)
			return true;
		NotificationChannel channel = NotificationManagerCompat.from(getApplicationContext()).getNotificationChannel(channelName);
		if(Build.VERSION.SDK_INT >= 26 &amp;&amp;  channel != null){
			return channel.getImportance() != NotificationManager.IMPORTANCE_NONE;
		}
		return true;

	}
	
	public void GetCountryCode(){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().getComponent(ILocationCommonService.class).getLocationByIp(Get(), new LocationCallback &lt;Location&gt;() {
					@Override
					public void onSuccess(Location data) {
						NativeCallBack.OnGetCountryCode(true, data.getCountryCode(), 0, data.getCountry(), data.getProvince());
					}

					@Override
					public void onFailed(GSDKError error) {
						NativeCallBack.OnGetCountryCode(false, error.getMessage(), error.getCode(), "", "");
					}
				});
			}
		});
	}
	
	public void ChangeLanguage(String langType){
		Rocket.getInstance().changeLanguage(this, langType);
	}
	
	//好评配置项
	private class RatingConfig implements IRatingConfig {

		private boolean mUserDefaultUi = true;
		public RatingConfig(boolean defulatUi){
			mUserDefaultUi = defulatUi;
		}
		@Override public void goToFeedback(Context context, String feedbackUrl) {
			//点击了差评按钮
			Log.verbose("goToFeedback " + feedbackUrl);
			GameActivity.OpenUrlBySDk("", feedbackUrl,"");
		}

		@Override public boolean needShowDefaultDialog() {
			return mUserDefaultUi;
		}

		@Override public IRatingUIConfig defaultUIConfig() {
			return new RatingUIConfig();
		}

		@Override public boolean serverJudge() {
			return false;
		}

		@Override public String packageName() {
			return Get().getPackageName();
		}
	}

	//默认UI元素配置
	private class RatingUIConfig extends IRatingUIConfig {

		@Override public String getMainTitleString() {
			return "喜欢该游戏吗?";
		}

		@Override public String getSecondTitleString() {
			return "您的好评是对我们最大的鼓励";
		}

		@Override public String getPositiveBtnText() {
			return "好评";
		}

		@Override public String getNegativeBtnText() {
			return "差评";
		}
	}


	public void ShowRatingUi(){
		IRatingService mRatingService = Rocket.getInstance().getComponent(IRatingService.class);
		mRatingService.showRatingView(this, new RatingConfig(true));
	}
	
	private IRatingDialogCallback mRatingDialogCallback = null;
	public void ShowRatingCustomUi(){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				IRatingService mRatingService = Rocket.getInstance().getComponent(IRatingService.class);
				mRatingService.setCustomUICallback(new ICustomRatingDialog() {
					@Override
					public void onCustomRatingShow() {
						Log.verbose("[sdk]ShowRatingCustomUi");
						if(mRatingDialogCallback == null)
							mRatingDialogCallback = CustomDialogManager.Companion.getInstance().getIPraiseDialogCallback();
					}
				});
				mRatingService.showRatingView(Get(), new RatingConfig(false));
			}
		});
	}

	public void DismissRatingCustomUi(){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(mRatingDialogCallback != null)
					mRatingDialogCallback.onDialogDismiss();
				mRatingDialogCallback = null;
			}
		});
	}

	public void OnRatingPraiseBtnClick(){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(mRatingDialogCallback != null)
					mRatingDialogCallback.onPraiseBtnClick();
			}
		});
	}

	public void OnRatingFeedbackBtnClick(){
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				if(mRatingDialogCallback != null)
					mRatingDialogCallback.onFeedbackBtnClick();
			}
		});
	}
	
	public boolean IsBsdkPay(){
		return Rocket.getInstance().getComponent(IAccountService.class).isBsdkPay();
	}

	private void RegisterExtraPayCallback(){
		Rocket.getInstance().registerExtraPayCallback(new IPayCallback&lt;RocketPayResult&gt;() {
			@Override
			public void onSuccess(@Nullable RocketPayResult result) {
				if(result != null){

				}
			}

			@Override
			public void onFailed(@Nullable RocketPayResult exception) {
				if(exception != null) {
					Log.error("[pay]registerExtraPayCallback,back failed:" + exception.toString());
				}
			}
		});
	}

	//amount: price   国内是分，国外是美分
	public void Pay(String productId, int goodType, int amount, String currency, String roleId,String roleName,
					int roleLevel, int roleVipLevel, String serverId,String extinfo1){
		RocketPayInfo rocketPayInfo = new RocketPayInfo();
		rocketPayInfo.setAmount(amount);
		rocketPayInfo.setCurrency(currency);
		rocketPayInfo.setExtraInfo(extinfo1);
		rocketPayInfo.setProductId(productId);
		rocketPayInfo.setRoleId(roleId);
		rocketPayInfo.setRoleLevel(String.valueOf(roleLevel));
		rocketPayInfo.setRoleVipLevel(roleVipLevel);
		rocketPayInfo.setRoleName(roleName);
		rocketPayInfo.setServerId(serverId);
		rocketPayInfo.setActivity("");
		rocketPayInfo.setSdkOpenId(GetSdkOpenId());
		rocketPayInfo.setGoodType(goodType);
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				Rocket.getInstance().pay(Get(), rocketPayInfo, new IPayCallback&lt;RocketPayResult&gt;() {
					@Override
					public void onSuccess(@Nullable RocketPayResult result) {
						if(result != null){
							NativeCallBack.OnPayCallback(true, result.getGameOrderId(),
									result.getGameProductId(),"", 0);
						}else{
							NativeCalls.UELogError("[sdk]pay success,but result is null, ???");
						}
						IFirebaseService firebaseService = Rocket.getInstance().getComponent(IFirebaseService.class);
						firebaseService.sendPayAnalyticsEvent(Get(),"custom_pay_event", amount, currency);
					}

					@Override
					public void onFailed(@Nullable RocketPayResult exception) {
						NativeCalls.UELogWarning("[pay]pay failed");
						if(exception != null &amp;&amp; exception.gsdkError != null){
							NativeCalls.UELogWarning("[pay]"+ exception.toString());
							NativeCallBack.OnPayCallback(false, exception.getGameOrderId(),
									exception.getGameProductId(),exception.gsdkError.getMessage(),exception.gsdkError.getCode());
						}
					}
				});
			}
		});

	}

	public void QueryProducts(String productId){
		List&lt;String&gt; ids = new ArrayList&lt;&gt;();
		ids.add(productId);
		Rocket.getInstance().queryProducts(ids, new IQueryProductsCallback() {
			@Override
			public void onSuccess(List&lt;RocketProductInfo&gt; productInfos) {
				if(productInfos.size() != 1){
					NativeCallBack.OnQueryProductInfo(false, productId, "", 0);
					NativeCalls.UELogError("[pay]queryProducts " + productId + ",get result size=" + productInfos.size() + ",info=" + productInfos.toString());
					return;
				}
				Gson gson = new Gson();
				String jsonData = gson.toJson(productInfos.get(0));
				NativeCallBack.OnQueryProductInfo(true, productId, jsonData, 0);
			}

			@Override
			public void onFailed(GSDKError error) {
				NativeCallBack.OnQueryProductInfo(false, productId, error.getMessage(), error.getCode());
			}
		});
	}

	//获取商品及游戏币活动信息
	public void QueryGoods(String roleId, String serverId, boolean bCurrency){
		QueryGoodsParams params =  new QueryGoodsParams();
		params.setRoleId(roleId);
		params.setServerId(serverId);
		params.setDoCurrencyAdapt(bCurrency);
		Rocket.getInstance().queryGoods(this, params, new IPayCallback&lt;RocketGoods&gt;() {
			@Override
			public void onSuccess(@Nullable RocketGoods result) {
				if(result == null || result.getRocketGoods() == null){
					NativeCallBack.OnQueryGoods(false,"UnKnown error,result is null",  -1);
					return;
				}
				Gson gson = new Gson();
				String jsonData = gson.toJson(result.getRocketGoods());
				NativeCallBack.OnQueryGoods(true,jsonData, 0);
			}

			@Override
			public void onFailed(@Nullable RocketGoods exception) {
				if(exception== null || exception.getGsdkError() == null){
					NativeCallBack.OnQueryGoods(false,"UnKnown error,exception is null",  -1);
					return;
				}
				NativeCallBack.OnQueryGoods(false,exception.getGsdkError().getMessage(), exception.getGsdkError().getCode());
			}
		});
	}

	public void SetMinorLimit(String country, String content){
		Rocket.getInstance().setV2MinorLimit(country, content, new IMinorsCallback() {
			@Override
			public void onSuccess(@Nullable String result) {
				if(result == null){
					NativeCallBack.OnSetMinorLimit(false, "UnKnown error,result is null", -1);
					return;
				}
				NativeCallBack.OnSetMinorLimit(true, result, 0);
			}

			@Override
			public void onFailed(GSDKError result) {
				NativeCallBack.OnSetMinorLimit(false,result.getMessage(),result.getCode());
			}
		});
	}

	public void GetMinorLimit(String country){
		Rocket.getInstance().getV2MinorLimit(country, new IMinorsCallback() {
			@Override
			public void onSuccess(@Nullable String result) {
				if(result == null){
					NativeCallBack.OnGetMinorLimit(false, "UnKnown error,result is null", -1);
					return;
				}
				NativeCallBack.OnGetMinorLimit(true, result, 0);
			}

			@Override
			public void onFailed(GSDKError result) {
				NativeCallBack.OnGetMinorLimit(false,result.getMessage(),result.getCode());
			}
		});
	}
	
	public void HasOpenFriendChainPermission(int platformId){
		Rocket.getInstance().getComponent(IFriendChainService.class).hasOpenFriendChainPermission(platformId, new ICallback &lt; ChainPermissionResult&gt;() {
			@Override
			public void onSuccess(ChainPermissionResult result) {
				if (result == null) {
					NativeCallBack.OnGetFriendChainPermission(platformId, false);
				} else {
					NativeCallBack.OnGetFriendChainPermission(platformId, result.hasPermission);
				}
			}

			@Override
			public void onFailed(ChainPermissionResult exception) {
				NativeCallBack.OnGetFriendChainPermission(platformId, false);
				NativeCalls.UELogWarning("[sdk]hasOpenFriendChainPermission failed " + exception.gsdkError.toString());
			}
		});
	}

	public void GetFriendChainInfo(int platformId){
		Rocket.getInstance().getComponent(IFriendChainService.class).showFriendChainInfo(platformId, true, new ICallback&lt;FriendChainInfoResult&gt;() {
			@Override
			public void onSuccess(FriendChainInfoResult result) {
				NativeCallBack.OnGetFriendChainInfo(true,platformId, result.data.toString(),0);
			}

			@Override
			public void onFailed(FriendChainInfoResult exception) {
				NativeCallBack.OnGetFriendChainInfo(false,platformId, exception.gsdkError.getMessage(), exception.gsdkError.getCode());
			}
		});
	}

	public boolean UnZip(String filePath,String destDir, boolean bUpdateSo){
		if(bUpdateSo)
			destDir = GameApplication.mHotPatcherSoPath;
		boolean bUnzipResult = HotPatcher.UnZip(filePath, destDir);
		if(bUnzipResult &amp;&amp; bUpdateSo){
			File fileTemp = new File(destDir + GameApplication.mUnrealSoHotPatcherName + ".tmp");
			if(!fileTemp.exists()){
				Log.verbose("[HotPatcher]unzip so file libUnreal_update.so.tmp not exist,error");
				return false;
			}
			File fileSo = new File(destDir + GameApplication.mUnrealSoHotPatcherName);
			if(fileSo.exists())
			{
				Log.verbose("[HotPatcher]unzip so file exist,delete it");
				fileSo.delete();
			}
			fileTemp.renameTo(fileSo);
		}
		return bUnzipResult;
	}

	public void NetMpaStart(String beginLog){
		if(!bGnaNetMpaSuccess){
			NativeCalls.UELogError("[sdk]netmpa start error, initMpaService:"+strNetMapInitErrorInfo);
			return;
		}
		Rocket.getInstance().getComponent(INetMpaService.class).start(beginLog);
	}
	public void NetMpaStop(String endLog){
		if(!bGnaNetMpaSuccess)
			return;
		Rocket.getInstance().getComponent(INetMpaService.class).stop(endLog);
	}
	public boolean NetMpaAddAddress(String[] ipAndPort, String context_id){
		if(!bGnaNetMpaSuccess || ipAndPort == null || ipAndPort.length ==0)
			return false;
		List&lt;String&gt; address = new ArrayList&lt;&gt;();
		for(int i = 0; i &lt; ipAndPort.length;i++)
			address.add(ipAndPort[i]);
		//回调函数移到Init里实现了	
		Rocket.getInstance().getComponent(INetMpaService.class).setAccAddress(address, context_id, false);
		return true;
	}	
	
	public void AddUploadLogfileFullPaths(String[]paths){
		if(paths == null || paths.length == 0)
			return;
		List&lt;String&gt; logPaths = new ArrayList&lt;&gt;();
		for(int i = 0; i &lt; paths.length; i++) {
			logPaths.add(paths[i]);
		}
		ILogService logService = Rocket.getInstance().getComponent(ILogService.class);
		logService.setExternalLogFilePathList(logPaths);
	}

	public void AddUploadLogfileDirPath(String dir){
		List&lt;String&gt; logPaths = new ArrayList&lt;&gt;();
		logPaths.add(dir);
		ILogService logService = Rocket.getInstance().getComponent(ILogService.class);
		logService.setExternalLogFileDirPathList(logPaths);
	}

	public void RestartApplication( ) {
		Context context = getApplicationContext();
		PackageManager pm = context.getPackageManager();
		Intent intent = pm.getLaunchIntentForPackage(context.getPackageName());
		int delayTime = 500;
		AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
		PendingIntent restartIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
		alarmManager.set(AlarmManager.RTC, System.currentTimeMillis() + delayTime, restartIntent);
		System.exit(0);
	}
        	
		</insert>
    </gameActivityClassAdditions>
    <gameActivityImplementsAdditions>
        <insert>OnNotchCallBack,</insert>
    </gameActivityImplementsAdditions>
	<gameActivityOnResumeAdditions>
		<insert>
		if (!UseDisplayCutout)
		{			
			NotchTools.getFullScreenTools().fullScreenUseStatusForOnWindowFocusChanged(this, null);
		}
		</insert>
	</gameActivityOnResumeAdditions>
	
	<splashActivityImportAdditions>
		<insert>
import android.text.TextUtils;
import com.bytedance.ttgame.base.GSDKError;
import com.bytedance.ttgame.rocketapi.Rocket;
import com.bytedance.ttgame.rocketapi.callback.InitCallback;
import com.bytedance.ttgame.rocketapi.callback.InitResult;
import com.bytedance.ttgame.module.upgrade.api.IUpgradeCallBack;
import com.bytedance.ttgame.module.upgrade.api.IUpgradeService;
		</insert>
	</splashActivityImportAdditions>
	<splashActivityOnCreateAdditions>
		<insert>
		GameActivity.SdkReport("guide_flow", "gsdk_init_start", "2","");
		InitGsdk();
		</insert>
	</splashActivityOnCreateAdditions>
	
	<splashActivityClassAdditions>
	<insert>
	public  static boolean isGsdkInit = false;
	public void InitGsdk() {
		WaitForForceUpdate = true;
		bNeedCheckPermissonOnCreate = false;
		Rocket.getInstance().init(getApplication(), new InitCallback() {
			@Override
			public void onSuccess(InitResult initResult) {
				isGsdkInit = true;
				GameActivity.SdkReport("guide_flow", "gsdk_init_success", "3","");
				CheckForceUpdate();
				CheckPermissions();
			}
			@Override
			public void onFailed(GSDKError gsdkError) {				
				Log.verbose("[sdk]init failed ");
				isGsdkInit = !TextUtils.isEmpty(Rocket.getInstance().getDeviceID(SplashActivity.this));
				CheckForceUpdate();
				CheckPermissions();				
			}
		});
	}
	private void  CheckForceUpdate(){
		GameActivity.SdkReport("guide_flow", "byte_sdk_checkupgrade", "58","");
		IUpgradeService upgradeService = Rocket.getInstance().getComponent(IUpgradeService.class);
		upgradeService.setUpgradeCallBack(new IUpgradeCallBack() {
			@Override
			public void onUpgradeSuccess() {
				Log.verbose("[sdk]CheckForceUpdate is need upgrade");
			}

			@Override
			public void onUpgradeFailed(GSDKError gsdkError) {
				WaitForForceUpdate = false;
				if (!WaitForPermission)
				{
					startActivity(GameActivityIntent);
					finish();
					overridePendingTransition(0, 0);
				}
			}
		});
		upgradeService.tryForceUpgradeV2(SplashActivity.this);
	}
	</insert>
	</splashActivityClassAdditions>
</root>