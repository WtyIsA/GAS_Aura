---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wutianyi.
--- DateTime: 2025/2/18 17:24
---

---@class UIWidgetBase
---@field protected _notDestroy_ boolean
---@field private _panelName_ string
---@field private _loadedResources_ HashMap<string, UObject>
---@field private _zOrder_ number
---@field private _parent_ UIWidgetBase
---@field private _children_ ArrayList<UIWidgetBase>
---@field private m_msgInitListener ArrayList
---@field private m_eventInitListener ArrayList
---@field private m_msgShowListener ArrayList
---@field private m_eventShowListener ArrayList
local UIWidgetBase = Class()
local CPP = Global.g_luaMgr

--function UIWidgetBase:OnInit()
--end

---@field outResPaths HashSet<string> @resource paths to load
--function UIWidgetBase:OnCollectResourcesToLoad(outResPaths, fromPanelName, ...)
--end

---@field resources HashMap<string, UObject>
---@return number @Seconds to wait before call OnShow
--function UIWidgetBase:OnResourcesLoaded(resources, fromPanelName, ...)
--    return 0
--end

--function UIWidgetBase:OnShow(fromPanelName, ...)
--end

--function UIWidgetBase:OnHide(toPanelName)
--end

--function UIWidgetBase:OnDestroy()
--end

function UIWidgetBase:GetPanelName()
    return self._panelName_
end

function UIWidgetBase:GetLoadedRes(path)
    return self._loadedResources_:get(path)
end

function UIWidgetBase:IsChild()
    return self._parent_ ~= nil
end

function UIWidgetBase:GetParentName()
    local parent = self._parent_;
    return parent and parent._panelName_
end

function UIWidgetBase:Hide()
    UIWidgetMgr.Hide(self._panelName_)
end

function UIWidgetBase:AddMsgListenInInit(msg, callback)
    if(self.m_msgInitListener == nil)then
        self.m_msgInitListener = ArrayList:new();
    end
    local o ={};
    o[1] = msg;
    o[2] = callback;
    ---@type ArrayList
    self.m_msgInitListener:add(o);
    msg:AddListener(self, callback);
end

function UIWidgetBase:AddEventListenInInit(key,callback)
    if(self.m_eventInitListener == nil)then
        self.m_eventInitListener = ArrayList:new();
    end
    local o ={};
    o[1] = key;
    o[2] = callback;
    self.m_eventInitListener:add(o)
    EventMgr:Instance():AddEventListener(key, callback,self)
end

function UIWidgetBase:AddMsgListenInShow(msg, callback)
    if(self.m_msgShowListener == nil)then
        self.m_msgShowListener = ArrayList:new();
    end
    local o ={};
    o[1] = msg;
    o[2] = callback;
    ---@type ArrayList
    self.m_msgShowListener:add(o);
    msg:AddListener(self, callback);
end

function UIWidgetBase:AddEventListenInShow(key, callback)
    if(self.m_eventShowListener == nil)then
        self.m_eventShowListener = ArrayList:new();
    end
    local o ={};
    o[1] = key;
    o[2] = callback;
    self.m_eventShowListener:add(o)
    EventMgr:Instance():AddEventListener(key, callback,self)
end

---@private
function UIWidgetBase:DoInit()
    self._CommonUIBindFunctions_ = {}
    self._CommonUIBindObjs_ = {}

    if self.OnInit then
        xpcall(self.OnInit, UIWidgetMgr.ErrorHandler, self)
    end
end

function UIWidgetBase:CallOnCollectResourcesToLoad(resPathList, fromPanelName, args)
    if self.OnCollectResourcesToLoad then
        xpcall(self.OnCollectResourcesToLoad, UIWidgetMgr.ErrorHandler, self, resPathList, fromPanelName, CPP.UnPack(args))
    end
end

function UIWidgetBase:CallOnResourcesLoaded(resources, fromPanelName, args)
    if self.OnResourcesLoaded then
        local r, t = xpcall(self.OnResourcesLoaded, UIWidgetMgr.ErrorHandler, self, resources, fromPanelName, CPP.UnPack(args))
        if r and type(t) == "number" and t > 0 then
            return t
        end
    end
    return 0
end

---@private
function UIWidgetBase:DoShow(layer, fromName, args)

    if layer and (self._zOrder_ ~= layer) then
        self._zOrder_ = layer
        --self:ResetZOrderInViewPort(layer)
        local slot = UWidgetLayoutLibrary.SlotAsCanvasSlot(self.Object)
        if slot then
            local anchors = slot:GetAnchors()
            anchors.Minimum.X = 0
            anchors.Minimum.Y = 0
            anchors.Maximum.X = 1
            anchors.Maximum.Y = 1
            slot:SetAnchors(anchors)
            slot:SetOffsets(FMargin())
            slot:SetZOrder(layer)
        else
            Utils.LogWarning("UIWidgetBase","No canvas slot got,check if panel parent is CanvasPanel.")
        end
    end

    self:SetVisibility(ESlateVisibility.SelfHitTestInvisible)

    if self.ActivateWidget then
        xpcall(self.ActivateWidget, UIWidgetMgr.ErrorHandler, self)
    end
    if self.OnShow then
        xpcall(self.OnShow, UIWidgetMgr.ErrorHandler, self, fromName, CPP.UnPack(args))
    end

    EventUtils.TriggerEvent(EventUtils.ShowUICallback, self._panelName_)
end

---@private
function UIWidgetBase:DoHide(toName)
    if self.DeactivateWidget then
        xpcall(self.DeactivateWidget, UIWidgetMgr.ErrorHandler, self)
    end
    if self.OnHide then
        xpcall(self.OnHide, UIWidgetMgr.ErrorHandler, self, toName)
    end

    self:SetVisibility(ESlateVisibility.Collapsed)
    if self._addedMappingContext_ then
        for k,v in pairs(self._addedMappingContext_) do
            self:RemoveMappingContext(v)
        end
        self._addedMappingContext_ = nil
    end

    if(self.m_msgShowListener)then
        local nSize = self.m_msgShowListener:size();
        for i=1, nSize, 1 do
            local o = self.m_msgShowListener:get(i);
            o[1]:RemoveListener(self, o[2]);
        end
        self.m_msgShowListener:clear();
    end
    if(self.m_eventShowListener)then
        local nSize = self.m_eventShowListener:size();
        for i=1, nSize, 1 do
            local o = self.m_eventShowListener:get(i);
            EventMgr:Instance():RemoveEventListener(o[1],o[2])
        end
        self.m_eventShowListener:clear();
    end

    if EventUtils then
        EventUtils.TriggerEvent(EventUtils.HideUICallback, self._panelName_)
    end
end

---@private
function UIWidgetBase:DoDestroy()
    Utils.LogInfo("UIWidgetMgr", "DestroyPanel %s", self._panelName_)
    if self.OnDestroy then
        xpcall(self.OnDestroy, UIWidgetMgr.ErrorHandler, self)
    end

    self:RemoveFromParent()
    CPP:RemoveWidgetFromGameViewPort(self)
    CPP:MarkObjectToDestory(self);

    if(self.m_msgInitListener)then
        local nSize = self.m_msgInitListener:size();
        for i=1, nSize, 1 do
            local o = self.m_msgInitListener:get(i);
            o[1]:RemoveListener(self, o[2]);
        end
        self.m_msgInitListener:clear();
    end
    if(self.m_eventInitListener)then
        local nSize = self.m_eventInitListener:size();
        for i=1, nSize, 1 do
            local o = self.m_eventInitListener:get(i);
            EventMgr:Instance():RemoveEventListener(o[1],o[2])
        end
        self.m_eventInitListener:clear();
    end

    self._zOrder_ = nil
    if self._loadedResources_ then
        self._loadedResources_:clear()
    end

    EventUtils.RemoveEventByObj(self)
    Global.g_Ticker:ClearAllObjectTick(self);
    self._CommonUIBindFunctions_ = nil
    self._CommonUIBindObjs_ = nil
end

---@param image UImage
---@param picPath string
---@param matchSize boolean
---@param defaultImage UTexture2D
---@return void
function UIWidgetBase:SetImage(image, picPath, matchSize, defaultImage)
    if not image.Brush.ResourceObject then
        if defaultImage then
            image:SetBrushFromTexture(defaultImage,false)
        else
            image:SetBrushFromTexture(UIWidgetMgr.GetDefaultImage(),false)
        end
    end
    matchSize = matchSize or false
    if (string.sub(picPath, 1,7) == "Texture") then
        local texturePath = UIWidgetMgr.GetTextureFullPath(picPath)
        if texturePath then
            image:SetBrushFromTextureAsync(texturePath, matchSize)
        end
    else
        local spritePath = UIWidgetMgr.GetSpriteFullPath(picPath)
        if spritePath then
            image:SetBrushFromSpriteAsync(spritePath, matchSize)
        end
    end
end

---@param MappingContext UInputMappingContext
function UIWidgetBase:AddMappingContext(MappingContext, Pawn)
    self:LuaAddMappingContext(UGameplayStatics.GetPlayerController(Global.g_gameInstance,0):CastToPlayerController(), Pawn, MappingContext, self._zOrder_)
    if not self._addedMappingContext_ then
        self._addedMappingContext_ = {}
    end
    self._addedMappingContext_[MappingContext] = MappingContext
end

---@param MappingContext UInputMappingContext
function UIWidgetBase:RemoveMappingContext(MappingContext)
    self:LuaRemoveMappingContext(UGameplayStatics.GetPlayerController(Global.g_gameInstance,0):CastToPlayerController(), MappingContext)
end

---@param InHandle FDataTableRowHandle @A variable in UUserWidget
---@param bDisplayInActionBar boolean
---@param InOnExecuteAction table @{self,self.FunctionName}
---@return number @use to call LuaRemoveActionBinding/LuaAddActionBinding
function UIWidgetBase:LuaRegisterUIActionBinding(InHandle, bDisplayInActionBar, InOnExecuteAction)
    return self:LuaRegisterUIBinding(InHandle, bDisplayInActionBar, InOnExecuteAction, false)
end

---@param InTagName string
---@param bDisplayInActionBar boolean
---@param InOnExecuteAction table @{self,self.FunctionName}
---@return number @use to call LuaRemoveActionBinding/LuaAddActionBinding
function UIWidgetBase:LuaRegisterUITagBinding(InTagName, bDisplayInActionBar, InOnExecuteAction)
    return self:LuaRegisterUIBinding(InTagName, bDisplayInActionBar, InOnExecuteAction, true)
end

---@private
function UIWidgetBase:LuaRegisterUIBinding(InArg1, bDisplayInActionBar, InOnExecuteAction, bTag, TargetWidget)
    if not self._CommonUIBindFunctions_ then
        Utils.LogError("UIWidgetBase","CallLuaCommonUIFunction _CommonUIBindFunctions_ not initialized.")
        return -1
    end

    local typeName, index = type(InOnExecuteAction), #self._CommonUIBindFunctions_ + 1
    if typeName == "function" then
        self._CommonUIBindFunctions_[index] = InOnExecuteAction
    elseif typeName == "table" then
        for k,v in pairs(InOnExecuteAction) do
            typeName = type(v)
            if typeName == "function" then
                self._CommonUIBindFunctions_[index] = v
            else
                self._CommonUIBindObjs_[index] = v
            end
        end
    else
        Utils.LogError("UIWidgetBase","LuaRegisterUIActionBinding InOnExecuteAction type is not function or table. type : "..typeName)
        return -1
    end
    if bTag then
        return self:LuaRegisterUITagBinding_Internal(InArg1, bDisplayInActionBar, index, TargetWidget)
    else
        return self:LuaRegisterUIActionBinding_Internal(InArg1, bDisplayInActionBar, index)
    end
end

---@private
function UIWidgetBase:CallLuaCommonUIFunction(index)
    if not self._CommonUIBindFunctions_ then
        Utils.LogError("UIWidgetBase","CallLuaCommonUIFunction _CommonUIBindFunctions_ not initialized.")
        return
    end
    local func = self._CommonUIBindFunctions_[index]
    if not func then
        Utils.LogError("UIWidgetBase","CallLuaCommonUIFunction Not find index of "..tostring(index)..", table size is "..tostring(#self._CommonUIBindFunctions_))
        return
    end

    xpcall(func, UIWidgetMgr.ErrorHandler, self._CommonUIBindObjs_[index] or self)
end

---@private
function UIWidgetBase:BP_OnHandleBackAction()
    self:Hide()
    return true
end

---@param IA UInputAction
---@param TriggerEventType ETriggerEvent
---@param Callback fun(self:UUserWidget, ActionValue:FInputActionValue, ElapsedTime:number, TriggeredTime:number):void
function UIWidgetBase:LuaBindInputAction(IA, TriggerEventType, Callback)
    if not self._BindedIA_ then
        self._BindedIA_ = {}
    end
    if not self._BindedIA_[IA] then
        self._BindedIA_[IA] = {}
    end
    if self._BindedIA_[IA][TriggerEventType] then
        return
    end
    self._BindedIA_[IA][TriggerEventType] = true
    self:LuaBindInputAction_Internal(UGameplayStatics.GetPlayerController(Global.g_gameInstance,0):CastToPlayerController(), IA, TriggerEventType, {self, Callback})
end

return UIWidgetBase